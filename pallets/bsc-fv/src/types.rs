use sp_std::convert::TryInto;
pub use ethereum_types::{H256, H160, U256};
pub use rlp::{RlpStream, Rlp, Encodable, Decodable, DecoderError};
pub use keccak_hash::{keccak};
use sp_std::convert::TryFrom;
use frame_support::pallet_prelude::TypeInfo;
use codec::{Encode, Decode, MaxEncodedLen};
use sp_std::vec::Vec;
use crate::Error;
// use sp_std::sync::Arc;
use eth_trie::{EthTrie, Trie};

use crate::crypto::Signature;

#[derive(Debug, Clone, Eq, PartialEq, Encode, Decode, TypeInfo)]
pub struct Header {
    pub chain_id: u64,
    pub parent_hash: H256,
    pub sha3_uncles: H256,
    pub miner: H160,
    pub state_root: H256,
    pub transactions_root: H256,
    pub receipts_root: H256,
    pub logs_bloom: LogsBloom,
    pub difficulty: u64,
    pub number: u64,
    pub gas_limit: U256,
    pub gas_used: U256,
    pub timestamp: u64,
    pub extra: [u8; 32],
    pub validators: Option<[H160; 21]>,
    pub signature: [u8; 65],
    pub mix_hash: H256,
    pub nonce: [u8; 8],
}

#[derive(Debug, Encode, Decode, TypeInfo, Eq, PartialEq)] // QUESTION: Is it bad to have Eq, etc. here when its just for testing?
pub struct ValidatorSet {
    pub last_update: u64,
    pub validators: [H160; 21]
}

impl MaxEncodedLen for ValidatorSet {
    fn max_encoded_len() -> usize {
        428 // 20 * 21 + 8 bytes
    }
}

impl MaxEncodedLen for Header {
    fn max_encoded_len() -> usize {
        1090 // 256 + 65 + 9 * 32 + 22 * 20 + 5 * 8 = (1089) (we need an extra byte for some reason)
    }
}

#[derive(Debug, Clone, Decode, PartialEq, Eq)]
pub struct Topics(pub Vec<H256>);


#[derive(Debug, Clone, Eq, PartialEq, Decode)]
pub struct Proof {
    pub bytes: Vec<Vec<u8>>,
    pub index: Vec<u8>
}

impl Default for Proof {
    fn default() -> Self {
        let raw: [u8; 1282] = [12,209,4,249,1,49,160,86,132,220,17,195,212,250,27,162,245,193,68,171,138,4,197,211,108,97,45,194,157,207,143,193,199,208,41,147,139,231,223,160,215,136,212,98,37,236,95,218,188,213,63,95,123,137,182,52,229,192,191,81,16,148,166,122,21,166,186,162,197,54,129,73,160,50,61,111,195,180,138,33,29,62,222,98,136,183,249,241,95,111,97,30,215,197,0,200,66,107,236,236,88,81,74,152,72,160,240,200,46,88,60,244,94,149,203,81,87,100,79,230,101,204,158,202,115,116,217,102,54,34,55,244,22,202,92,237,193,212,160,156,15,220,133,51,133,228,189,31,134,61,17,122,104,120,132,236,68,20,1,213,128,72,132,252,196,32,139,212,167,50,79,160,209,146,141,170,150,201,86,84,41,125,55,3,135,58,5,247,27,225,38,116,187,125,103,118,23,112,131,59,45,161,188,97,160,180,173,188,137,53,81,30,149,196,196,4,143,152,60,119,11,49,169,24,173,2,118,118,66,168,246,4,20,98,144,225,138,160,79,217,183,86,176,10,70,190,31,172,253,22,153,29,138,91,242,125,155,105,77,26,216,85,7,134,58,141,69,45,51,92,160,157,151,129,34,116,159,78,68,243,49,126,254,215,176,0,99,211,100,141,22,150,127,211,216,211,138,49,231,99,244,107,169,128,128,128,128,128,128,128,128,81,8,249,2,17,160,169,81,88,13,54,213,36,164,205,51,0,101,154,193,218,254,198,224,154,105,87,203,161,23,112,5,157,246,7,49,193,93,160,133,13,102,21,69,215,241,0,158,202,189,174,172,36,10,137,180,82,211,245,130,153,49,143,212,243,22,168,165,187,193,220,160,131,166,197,103,203,111,14,64,124,165,5,227,95,70,233,176,77,30,29,131,161,16,197,122,146,76,171,13,26,140,205,228,160,203,109,12,210,133,166,57,99,194,74,94,95,237,122,72,247,230,165,132,26,113,64,176,53,180,199,212,47,237,168,140,219,160,31,66,131,73,181,100,76,38,4,195,124,12,7,243,91,94,152,175,164,89,240,130,149,127,218,139,0,221,196,244,237,247,160,78,204,90,149,44,133,229,155,109,187,23,118,208,176,20,185,88,196,169,114,44,2,186,115,18,248,69,24,89,169,137,148,160,207,26,157,148,70,57,67,161,127,186,121,80,213,253,167,222,118,43,173,122,56,252,118,164,215,38,112,242,41,66,15,29,160,54,150,164,0,225,196,48,222,226,52,133,116,127,71,229,189,17,217,113,36,146,181,251,126,20,63,187,80,48,218,199,63,160,50,157,25,119,100,134,44,174,163,0,90,202,139,211,239,168,133,82,31,133,101,182,143,25,169,248,253,230,127,96,182,5,160,61,169,98,179,40,153,231,71,114,43,120,162,255,149,190,41,168,234,238,111,210,22,247,182,124,132,14,150,127,58,13,18,160,119,71,196,209,133,220,174,246,89,192,253,176,22,59,185,112,113,125,175,121,26,206,48,81,68,44,63,146,109,73,112,164,160,206,223,227,3,45,177,226,148,154,166,71,116,201,199,132,92,38,133,11,69,65,150,170,34,16,141,36,137,25,44,164,123,160,15,120,235,255,255,115,146,84,91,234,225,114,190,224,8,248,163,126,157,187,32,198,200,118,176,144,70,28,249,16,107,81,160,164,247,105,92,239,108,168,83,203,62,116,141,79,38,11,154,207,0,175,39,189,120,88,188,98,167,42,186,230,56,189,146,160,61,41,103,215,203,132,145,101,137,185,203,107,193,211,233,182,2,31,135,5,205,59,208,98,187,144,33,102,170,2,150,226,160,116,35,74,208,253,204,228,200,245,180,78,104,24,146,238,169,253,11,110,138,173,250,82,210,131,153,0,92,163,62,200,107,128,197,6,249,1,174,32,185,1,170,249,1,167,1,131,185,216,98,185,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,157,248,155,148,4,92,67,36,3,157,169,28,82,197,93,245,215,133,56,90,171,7,61,207,248,99,160,221,242,82,173,27,226,200,155,105,194,176,104,252,55,141,170,149,43,167,241,99,196,161,22,40,245,90,77,245,35,179,239,160,0,0,0,0,0,0,0,0,0,0,0,0,69,34,93,53,54,172,2,146,143,22,7,26,176,80,102,188,233,92,44,213,160,0,0,0,0,0,0,0,0,0,0,0,0,255,122,224,66,69,43,5,132,229,17,109,14,153,33,238,211,37,21,12,22,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,214,245,95,16,52,104,0,4,111];
        let proof: Proof = Decode::decode(&mut &*raw.to_vec()).unwrap();

        return proof
    }
}

impl Header {

    /// returns a blocks hash used in the signature scheme
    pub fn consensus_hash(&self) -> H256 {
        let res = rlp::encode(self);
        // println!("Header Hash: {:?}", keccak(res.as_ref()));
        H256::from(keccak(res.as_ref()).as_fixed_bytes())
    }

    /// returns a block header hash in clique format. This is used for everything except signature checks
    pub fn hash(&self) -> H256 {
        let mut s = RlpStream::new();
        s.begin_list(15);
        s.append(&self.parent_hash);
        s.append(&self.sha3_uncles);
        s.append(&self.miner);
        s.append(&self.state_root);
        s.append(&self.transactions_root);
        s.append(&self.receipts_root);
        s.append(&self.logs_bloom);
        s.append(&self.difficulty);
        s.append(&self.number);
        s.append(&self.gas_limit);
        s.append(&self.gas_used);
        s.append(&self.timestamp);
        s.append(&self.construct_extra_field(false));
        s.append(&self.mix_hash);
        s.append(&self.nonce.to_vec());
        H256::from(keccak(s.as_raw()).as_fixed_bytes())
    }

    /// Checks if the signed msg was the headers hash
    pub fn signature_valid(&self) -> Result<(), Option<&'static str>> {
        let sig = &Signature::try_from(self.signature.as_ref()).unwrap();
        match sig.verify(self.consensus_hash(), self.miner) {
            Ok(_) => Ok(()),
            Err(_) => Err(None)
        }
    }

    /// Checks if the headers signer is part of the ValidatorSet
    pub fn signer_valid(&self, validator_set: &ValidatorSet) -> Result<(), Option<&'static str>> {
        match &validator_set.validators.contains(&self.miner) {
            true => Ok(()),
            false => Err(None)
        }
    }

    /// Checks if the header can be finalized by current ValidatorSet. This is ensured by checking:
    /// 1. The number of the submitted header is larger then the current ValidatorSet
    /// 2. The header number is within 200 blocks of the current ValidatorSet (as its valid that amount)
    pub fn validator_set_authorized(&self, validator_set: ValidatorSet) -> Result<(), Option<&'static str>> {
        if self.number > validator_set.last_update && self.number <= validator_set.last_update + 200 {
            Ok(())
        } else {
            Err(None)
        }
    }

    fn construct_extra_field(&self, consensus: bool) -> Vec<u8> {
        let mut field: Vec<u8> = self.extra.to_vec();

        if &self.number % 200 == 0 {
            for validator in self.validators.unwrap() {
                field.append(&mut validator.as_bytes().to_vec())
            }
        }

        if !consensus {
            field.append(&mut self.signature.to_vec())
        }

        return field
    }
}

impl Default for Header {
    fn default() -> Self {
        let raw: [u8; 1090] = [56, 0, 0, 0, 0, 0, 0, 0, 243, 247, 170, 68, 94, 168, 240, 122, 56, 249, 106, 176, 222, 159, 140, 206, 75, 214, 28, 179, 0, 127, 181, 255, 43, 170, 245, 85, 13, 65, 195, 143, 29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66, 253, 64, 212, 147, 71, 104, 91, 29, 237, 128, 19, 120, 93, 102, 35, 204, 24, 210, 20, 50, 11, 107, 182, 71, 89, 141, 253, 180, 148, 144, 234, 70, 80, 154, 228, 41, 94, 91, 251, 174, 37, 162, 39, 239, 158, 208, 78, 72, 85, 74, 251, 228, 249, 115, 210, 53, 59, 217, 130, 39, 173, 222, 247, 132, 187, 135, 1, 22, 144, 40, 120, 128, 112, 185, 219, 113, 177, 64, 189, 188, 118, 245, 188, 51, 145, 105, 225, 137, 68, 95, 243, 132, 6, 46, 245, 218, 123, 33, 255, 248, 65, 145, 147, 32, 117, 221, 214, 158, 29, 90, 183, 176, 84, 27, 147, 118, 77, 20, 71, 55, 204, 38, 107, 162, 139, 12, 166, 27, 16, 178, 91, 4, 65, 236, 4, 142, 105, 78, 32, 135, 60, 148, 92, 33, 72, 127, 131, 198, 128, 130, 200, 137, 88, 104, 145, 54, 40, 128, 112, 49, 95, 238, 88, 182, 100, 129, 88, 71, 237, 15, 97, 168, 36, 206, 78, 72, 50, 24, 251, 103, 10, 24, 37, 173, 57, 1, 246, 54, 203, 249, 139, 102, 181, 223, 162, 29, 94, 132, 6, 239, 168, 117, 87, 41, 90, 170, 198, 28, 100, 178, 37, 198, 119, 220, 5, 196, 200, 86, 218, 142, 124, 107, 30, 21, 164, 191, 119, 34, 151, 20, 68, 216, 86, 152, 143, 34, 244, 226, 187, 132, 42, 24, 87, 197, 82, 135, 47, 132, 51, 72, 16, 236, 4, 49, 157, 17, 132, 77, 179, 156, 176, 217, 216, 53, 222, 98, 166, 12, 157, 148, 129, 249, 152, 193, 101, 125, 194, 136, 141, 28, 51, 131, 140, 75, 200, 243, 92, 215, 152, 150, 33, 205, 129, 38, 156, 47, 139, 107, 20, 69, 155, 200, 129, 209, 84, 26, 52, 162, 152, 142, 113, 68, 96, 65, 27, 15, 47, 52, 155, 166, 15, 36, 148, 178, 177, 72, 138, 23, 226, 165, 214, 16, 18, 69, 154, 77, 217, 38, 52, 59, 127, 84, 34, 240, 34, 0, 242, 124, 108, 198, 5, 113, 100, 67, 48, 117, 40, 152, 241, 128, 10, 197, 74, 54, 202, 198, 204, 101, 90, 132, 57, 234, 13, 33, 84, 3, 45, 2, 0, 0, 0, 0, 0, 0, 0, 208, 239, 22, 1, 0, 0, 0, 0, 66, 4, 181, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 76, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 6, 150, 98, 0, 0, 0, 0, 216, 131, 1, 1, 10, 132, 103, 101, 116, 104, 136, 103, 111, 49, 46, 49, 51, 46, 52, 133, 108, 105, 110, 117, 120, 0, 0, 0, 195, 22, 123, 223, 1, 36, 101, 23, 108, 70, 26, 251, 49, 110, 188, 119, 60, 97, 250, 238, 133, 166, 81, 93, 170, 41, 94, 38, 73, 92, 239, 111, 105, 223, 166, 153, 17, 217, 216, 228, 243, 187, 173, 184, 155, 41, 169, 124, 110, 255, 184, 164, 17, 218, 188, 106, 222, 239, 170, 132, 245, 6, 124, 139, 190, 45, 76, 64, 123, 190, 73, 67, 142, 216, 89, 254, 150, 91, 20, 13, 207, 26, 171, 113, 169, 63, 52, 155, 186, 254, 193, 85, 24, 25, 184, 190, 30, 254, 162, 252, 70, 202, 116, 154, 161, 104, 91, 29, 237, 128, 19, 120, 93, 102, 35, 204, 24, 210, 20, 50, 11, 107, 182, 71, 89, 112, 246, 87, 22, 78, 91, 117, 104, 155, 100, 183, 253, 31, 162, 117, 243, 52, 242, 142, 24, 114, 182, 28, 96, 20, 52, 45, 145, 68, 112, 236, 122, 194, 151, 91, 227, 69, 121, 108, 43, 122, 226, 245, 185, 227, 134, 205, 27, 80, 164, 85, 6, 150, 217, 87, 203, 73, 0, 240, 58, 139, 108, 143, 217, 61, 111, 76, 234, 66, 187, 179, 69, 219, 198, 240, 223, 219, 91, 236, 115, 159, 140, 205, 175, 204, 57, 243, 199, 214, 235, 246, 55, 201, 21, 22, 115, 203, 195, 107, 136, 166, 247, 155, 96, 53, 159, 20, 29, 249, 10, 12, 116, 81, 37, 177, 49, 202, 175, 253, 18, 170, 207, 106, 129, 25, 247, 225, 22, 35, 181, 164, 61, 166, 56, 233, 31, 102, 154, 19, 15, 172, 14, 21, 160, 56, 238, 223, 198, 139, 163, 195, 92, 115, 254, 213, 190, 74, 7, 175, 181, 190, 128, 125, 221, 176, 116, 99, 156, 217, 250, 97, 180, 118, 118, 192, 100, 252, 80, 214, 44, 206, 47, 215, 84, 78, 11, 44, 201, 70, 146, 212, 167, 4, 222, 190, 247, 188, 182, 19, 40, 226, 211, 167, 57, 239, 252, 211, 169, 147, 135, 208, 21, 226, 96, 238, 250, 199, 46, 190, 161, 233, 174, 50, 97, 164, 117, 162, 123, 177, 2, 143, 20, 11, 194, 167, 200, 67, 49, 138, 253, 234, 10, 110, 60, 81, 27, 189, 16, 244, 81, 158, 206, 55, 220, 36, 136, 126, 17, 181, 93, 238, 34, 99, 121, 219, 131, 207, 252, 104, 20, 149, 115, 12, 17, 253, 222, 121, 186, 76, 12, 239, 2, 116, 227, 24, 16, 201, 223, 2, 249, 143, 175, 222, 15, 132, 31, 78, 102, 161, 205, 225, 206, 184, 239, 238, 202, 255, 50, 251, 159, 138, 97, 5, 58, 86, 182, 9, 161, 87, 207, 150, 92, 169, 210, 124, 241, 138, 38, 231, 125, 95, 161, 53, 36, 241, 62, 46, 53, 4, 34, 63, 237, 21, 254, 35, 7, 184, 249, 167, 176, 60, 144, 109, 135, 11, 164, 81, 91, 237, 98, 17, 37, 81, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

        let result: Header = Decode::decode(&mut &*raw.to_vec()).unwrap();
        return result
    }
}

impl Encodable for Header {
    // this contains all fields needed to reproduce the hash used for consensus. THIS IS NOT THE HASH RETURNED FROM RPC
    fn rlp_append(&self, s: &mut RlpStream) {
        s.begin_list(16);
        s.append(&self.chain_id);
        s.append(&self.parent_hash);
        s.append(&self.sha3_uncles);
        s.append(&self.miner);
        s.append(&self.state_root);
        s.append(&self.transactions_root);
        s.append(&self.receipts_root);
        s.append(&self.logs_bloom);
        s.append(&self.difficulty);
        s.append(&self.number);
        s.append(&self.gas_limit);
        s.append(&self.gas_used);
        s.append(&self.timestamp);
        s.append(&self.construct_extra_field(true));
        s.append(&self.mix_hash);
        s.append(&self.nonce.to_vec());
    }
}

#[derive(Debug, Clone, Eq, PartialEq, Decode)]
pub struct Receipt {
    pub status: bool,
    pub cumulative_gas_used: U256,
    pub logs_bloom: LogsBloom,
    pub logs: Vec<Event>,
}

impl Receipt {
    /// Checks if the submitted inclusion proof is valid for &self and the passed root
    pub fn in_block(
        &self,
        root: &[u8; 32],
        proof: Proof
    ) -> Result<(), Option<&'static str>> {
        let trie = EthTrie::new();
        let res = trie.verify_proof(root.into(), &proof.index.as_slice(), proof.bytes);
        // if the rlp encoded receipt is the result, the receipt was included in the receipt_root
        match res {
            Ok(Some(receipt)) => { // unpack proof result
                if rlp::encode(self).to_vec() == receipt {
                    return Ok(());
                }
                Err(None)
            }
            _ => Err(None)
        }

    }
}

impl Default for Receipt {
     fn default() -> Self {
        let raw: [u8; 440] = [1,98,216,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,92,67,36,3,157,169,28,82,197,93,245,215,133,56,90,171,7,61,207,12,221,242,82,173,27,226,200,155,105,194,176,104,252,55,141,170,149,43,167,241,99,196,161,22,40,245,90,77,245,35,179,239,0,0,0,0,0,0,0,0,0,0,0,0,69,34,93,53,54,172,2,146,143,22,7,26,176,80,102,188,233,92,44,213,0,0,0,0,0,0,0,0,0,0,0,0,255,122,224,66,69,43,5,132,229,17,109,14,153,33,238,211,37,21,12,22,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,214,245,95,16,52,104,0];
        let receipt: Receipt = Decode::decode(&mut &*raw.to_vec()).unwrap();

         return receipt
     }
}
//
impl Encodable for Receipt {
    // this contains all fields needed to reproduce the hash used for consensus. THIS IS NOT THE HASH RETURNED FROM RPC
    fn rlp_append(&self, s: &mut RlpStream) {
        s.begin_list(4);
        s.append(&self.status);
        s.append(&self.cumulative_gas_used);
        s.append(&self.logs_bloom);
        s.append_list::<Event, Event>(&self.logs);
    }
}

impl Decodable for Receipt {
    fn decode(rlp: &Rlp) -> Result<Self, DecoderError> {

        Ok(Receipt {
            status: rlp.val_at(0)?,
            cumulative_gas_used: rlp.val_at(1)?,
            logs_bloom: rlp.val_at(2)?,
            logs: rlp.list_at(3)?,
        })
    }
}

#[derive(Debug, Clone, Eq, PartialEq, Decode)]
pub struct Event {
    pub address: H160,
    pub topics: Topics,
    pub data: Vec<u8>,
}

impl Encodable for Event {
    // this contains all fields needed to reproduce the hash used for consensus. THIS IS NOT THE HASH RETURNED FROM RPC
    fn rlp_append(&self, s: &mut RlpStream) {
        s.begin_list(3);
        s.append(&self.address);
        s.append_list(&self.topics.0);
        s.append(&self.data);
    }
}


impl Decodable for Event {
    fn decode(rlp: &Rlp) -> Result<Self, DecoderError> {

        Ok(Event {
            address: rlp.val_at(0)?,
            topics: Topics(rlp.list_at(1)?),
            data: rlp.val_at(2)?,
        })
    }
}

#[derive(Debug, Clone, Encode, Decode, PartialEq, Eq, TypeInfo)]
pub struct LogsBloom(pub [u8; 256]);

impl Encodable for LogsBloom {
   fn rlp_append(&self, s: &mut RlpStream) {
		s.encoder().encode_value(&self.as_slice());
	}
}

impl Decodable for LogsBloom {
    fn decode(rlp: &Rlp) -> Result<Self, DecoderError> {
        // a bit messy that we're converting twice in this function, but I get lifetime errors when I want to keep this a slice
        let res = rlp.decoder().decode_value(|bytes| Ok(bytes.to_vec()));

        match res {
            Ok(val) =>  {
                match LogsBloom::try_from(val).into() {
                    Ok(res) => Ok(res),
                    Err(_) => Err(DecoderError::Custom("Invalid Bloom Length"))
                }
            },
            Err(err) => Err(err)
        }
    }
}

impl LogsBloom {
    fn as_slice(&self) -> &[u8] {
        self.0.as_slice()
    }
}

impl TryFrom<Vec<u8>> for LogsBloom {
    type Error = ();

    fn try_from(item: Vec<u8>) -> Result<Self, Self::Error>{
        let res: Result<[u8; 256], _> = item.try_into();
        match res {
            Ok(val) => Ok(LogsBloom(val)),
            Err(_) => Err(())
        }
    }
}

#[cfg(test)]
mod tests {
    use sp_std::sync::Arc;
    use sp_std::vec::Vec;
    use crate::types::{Header, ValidatorSet, Receipt, Proof};
    use codec::Decode;
    use frame_support::assert_ok;
    use crate::Error;

    // Headers for testing
    const BLOCK_200: [u8; 1090] = [56, 0, 0, 0, 0, 0, 0, 0, 17, 221, 139, 143, 215, 88, 127, 210, 141, 1, 65, 71, 109, 44, 225, 115, 43, 236, 227, 71, 201, 59, 181, 79, 31, 236, 238, 185, 10, 245, 242, 157, 29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66, 253, 64, 212, 147, 71, 206, 47, 215, 84, 78, 11, 44, 201, 70, 146, 212, 167, 4, 222, 190, 247, 188, 182, 19, 40, 43, 221, 65, 48, 10, 18, 169, 152, 157, 157, 212, 59, 107, 20, 93, 185, 223, 75, 95, 132, 51, 248, 243, 197, 240, 155, 67, 175, 131, 81, 167, 151, 170, 118, 41, 50, 32, 181, 6, 22, 76, 212, 45, 137, 73, 157, 86, 80, 127, 84, 156, 103, 168, 137, 228, 4, 214, 40, 243, 17, 43, 106, 85, 185, 34, 111, 55, 172, 153, 75, 15, 240, 245, 170, 12, 236, 108, 52, 205, 187, 206, 214, 13, 137, 216, 189, 236, 145, 133, 55, 39, 60, 175, 185, 77, 234, 28, 224, 231, 108, 202, 167, 59, 16, 203, 31, 194, 197, 176, 7, 53, 239, 177, 140, 68, 123, 239, 100, 197, 249, 251, 150, 182, 224, 124, 110, 151, 128, 68, 205, 51, 95, 182, 5, 49, 201, 247, 83, 114, 53, 1, 89, 21, 210, 110, 251, 199, 153, 222, 211, 174, 170, 81, 103, 14, 192, 47, 245, 110, 169, 157, 210, 64, 116, 141, 86, 209, 62, 119, 43, 65, 216, 171, 85, 34, 60, 111, 86, 42, 97, 247, 246, 120, 95, 255, 53, 83, 54, 138, 156, 18, 78, 89, 53, 151, 123, 43, 55, 127, 64, 205, 175, 162, 217, 55, 232, 252, 51, 217, 67, 182, 207, 168, 174, 143, 239, 204, 99, 151, 189, 21, 202, 197, 243, 54, 50, 155, 189, 87, 45, 123, 135, 110, 195, 86, 229, 63, 57, 192, 214, 40, 172, 196, 111, 20, 39, 209, 222, 241, 155, 173, 77, 202, 128, 63, 176, 238, 11, 225, 173, 136, 222, 119, 13, 244, 145, 123, 109, 90, 111, 77, 30, 211, 237, 85, 218, 38, 206, 85, 233, 109, 103, 235, 127, 121, 230, 35, 204, 127, 215, 135, 15, 140, 9, 222, 115, 144, 159, 50, 193, 117, 227, 244, 50, 243, 23, 160, 102, 58, 219, 232, 217, 238, 162, 223, 158, 48, 149, 241, 42, 189, 179, 252, 221, 81, 85, 193, 67, 3, 44, 220, 94, 236, 190, 217, 18, 96, 185, 87, 159, 91, 222, 63, 78, 240, 202, 108, 33, 24, 245, 125, 46, 2, 0, 0, 0, 0, 0, 0, 0, 8, 239, 22, 1, 0, 0, 0, 0, 248, 170, 152, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164, 175, 151, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 3, 150, 98, 0, 0, 0, 0, 216, 131, 1, 1, 10, 132, 103, 101, 116, 104, 136, 103, 111, 49, 46, 49, 51, 46, 52, 133, 108, 105, 110, 117, 120, 0, 0, 0, 195, 22, 123, 223, 1, 36, 101, 23, 108, 70, 26, 251, 49, 110, 188, 119, 60, 97, 250, 238, 133, 166, 81, 93, 170, 41, 94, 38, 73, 92, 239, 111, 105, 223, 166, 153, 17, 217, 216, 228, 243, 187, 173, 184, 155, 41, 169, 124, 110, 255, 184, 164, 17, 218, 188, 106, 222, 239, 170, 132, 245, 6, 124, 139, 190, 45, 76, 64, 123, 190, 73, 67, 142, 216, 89, 254, 150, 91, 20, 13, 207, 26, 171, 113, 169, 63, 52, 155, 186, 254, 193, 85, 24, 25, 184, 190, 30, 254, 162, 252, 70, 202, 116, 154, 161, 104, 91, 29, 237, 128, 19, 120, 93, 102, 35, 204, 24, 210, 20, 50, 11, 107, 182, 71, 89, 112, 246, 87, 22, 78, 91, 117, 104, 155, 100, 183, 253, 31, 162, 117, 243, 52, 242, 142, 24, 114, 182, 28, 96, 20, 52, 45, 145, 68, 112, 236, 122, 194, 151, 91, 227, 69, 121, 108, 43, 122, 226, 245, 185, 227, 134, 205, 27, 80, 164, 85, 6, 150, 217, 87, 203, 73, 0, 240, 58, 139, 108, 143, 217, 61, 111, 76, 234, 66, 187, 179, 69, 219, 198, 240, 223, 219, 91, 236, 115, 159, 140, 205, 175, 204, 57, 243, 199, 214, 235, 246, 55, 201, 21, 22, 115, 203, 195, 107, 136, 166, 247, 155, 96, 53, 159, 20, 29, 249, 10, 12, 116, 81, 37, 177, 49, 202, 175, 253, 18, 170, 207, 106, 129, 25, 247, 225, 22, 35, 181, 164, 61, 166, 56, 233, 31, 102, 154, 19, 15, 172, 14, 21, 160, 56, 238, 223, 198, 139, 163, 195, 92, 115, 254, 213, 190, 74, 7, 175, 181, 190, 128, 125, 221, 176, 116, 99, 156, 217, 250, 97, 180, 118, 118, 192, 100, 252, 80, 214, 44, 206, 47, 215, 84, 78, 11, 44, 201, 70, 146, 212, 167, 4, 222, 190, 247, 188, 182, 19, 40, 226, 211, 167, 57, 239, 252, 211, 169, 147, 135, 208, 21, 226, 96, 238, 250, 199, 46, 190, 161, 233, 174, 50, 97, 164, 117, 162, 123, 177, 2, 143, 20, 11, 194, 167, 200, 67, 49, 138, 253, 234, 10, 110, 60, 81, 27, 189, 16, 244, 81, 158, 206, 55, 220, 36, 136, 126, 17, 181, 93, 238, 34, 99, 121, 219, 131, 207, 252, 104, 20, 149, 115, 12, 17, 253, 222, 121, 186, 76, 12, 239, 2, 116, 227, 24, 16, 201, 223, 2, 249, 143, 175, 222, 15, 132, 31, 78, 102, 161, 205, 228, 74, 234, 220, 4, 212, 237, 161, 132, 81, 230, 189, 214, 11, 79, 227, 201, 160, 96, 71, 113, 199, 58, 194, 14, 171, 44, 114, 47, 110, 235, 147, 117, 188, 71, 7, 29, 158, 183, 193, 163, 245, 6, 235, 60, 249, 117, 44, 164, 163, 147, 41, 245, 225, 212, 161, 3, 82, 201, 141, 95, 234, 75, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    const BLOCK_300: [u8; 670] = [56, 0, 0, 0, 0, 0, 0, 0, 236, 128, 148, 95, 189, 163, 167, 115, 252, 136, 233, 163, 36, 73, 118, 136, 134, 26, 19, 26, 96, 91, 178, 227, 98, 84, 247, 241, 22, 148, 126, 239, 29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66, 253, 64, 212, 147, 71, 159, 140, 205, 175, 204, 57, 243, 199, 214, 235, 246, 55, 201, 21, 22, 115, 203, 195, 107, 136, 152, 244, 245, 140, 223, 185, 53, 95, 86, 114, 96, 86, 192, 188, 123, 250, 69, 15, 183, 209, 159, 23, 152, 101, 176, 84, 154, 24, 174, 37, 44, 173, 239, 239, 130, 178, 243, 42, 169, 123, 64, 22, 183, 195, 76, 97, 215, 160, 0, 176, 208, 125, 58, 136, 192, 132, 83, 159, 5, 136, 19, 227, 169, 169, 191, 219, 97, 24, 112, 131, 21, 200, 38, 236, 229, 225, 152, 41, 139, 205, 241, 231, 185, 241, 195, 72, 21, 145, 130, 192, 144, 8, 204, 32, 2, 117, 188, 38, 147, 0, 8, 10, 81, 112, 198, 4, 0, 78, 197, 25, 13, 6, 170, 164, 70, 110, 212, 136, 15, 208, 35, 19, 69, 194, 62, 137, 95, 44, 0, 85, 10, 115, 44, 245, 20, 10, 155, 37, 9, 189, 130, 1, 17, 202, 27, 0, 62, 50, 86, 132, 137, 87, 68, 100, 98, 18, 86, 108, 114, 137, 129, 65, 165, 118, 37, 75, 70, 52, 87, 33, 219, 30, 69, 96, 107, 43, 103, 91, 86, 203, 137, 198, 76, 234, 236, 173, 102, 93, 201, 159, 204, 233, 23, 220, 158, 169, 111, 18, 135, 103, 183, 86, 62, 221, 16, 136, 57, 132, 110, 131, 65, 66, 155, 142, 119, 21, 124, 114, 85, 147, 99, 130, 239, 231, 191, 65, 132, 13, 182, 175, 104, 70, 199, 200, 4, 16, 200, 186, 143, 160, 96, 54, 204, 133, 61, 243, 101, 8, 169, 5, 29, 72, 97, 167, 187, 55, 14, 181, 176, 96, 6, 171, 54, 196, 41, 17, 137, 222, 106, 30, 150, 218, 32, 178, 7, 120, 70, 155, 69, 220, 70, 40, 33, 91, 33, 227, 246, 45, 48, 208, 108, 251, 3, 25, 206, 43, 84, 200, 53, 217, 25, 114, 83, 242, 113, 28, 32, 51, 33, 27, 60, 53, 106, 109, 37, 11, 145, 115, 245, 120, 36, 91, 126, 27, 1, 64, 116, 44, 51, 125, 183, 154, 70, 100, 23, 209, 84, 9, 124, 78, 231, 137, 13, 76, 247, 10, 74, 63, 185, 61, 15, 111, 2, 0, 0, 0, 0, 0, 0, 0, 108, 239, 22, 1, 0, 0, 0, 0, 105, 152, 167, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 106, 65, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 4, 150, 98, 0, 0, 0, 0, 217, 131, 1, 1, 10, 132, 103, 101, 116, 104, 137, 103, 111, 49, 46, 49, 54, 46, 49, 53, 133, 108, 105, 110, 117, 120, 0, 0, 195, 22, 123, 223, 0, 41, 249, 205, 23, 208, 8, 51, 177, 245, 163, 144, 236, 207, 192, 147, 16, 62, 203, 216, 222, 246, 176, 28, 99, 28, 41, 218, 40, 148, 54, 107, 73, 31, 159, 95, 22, 62, 230, 95, 30, 76, 73, 202, 46, 51, 103, 136, 250, 175, 162, 194, 221, 219, 55, 246, 219, 126, 61, 97, 211, 7, 155, 120, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    const BLOCK_400: [u8; 1090] = [56, 0, 0, 0, 0, 0, 0, 0, 243, 247, 170, 68, 94, 168, 240, 122, 56, 249, 106, 176, 222, 159, 140, 206, 75, 214, 28, 179, 0, 127, 181, 255, 43, 170, 245, 85, 13, 65, 195, 143, 29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66, 253, 64, 212, 147, 71, 104, 91, 29, 237, 128, 19, 120, 93, 102, 35, 204, 24, 210, 20, 50, 11, 107, 182, 71, 89, 141, 253, 180, 148, 144, 234, 70, 80, 154, 228, 41, 94, 91, 251, 174, 37, 162, 39, 239, 158, 208, 78, 72, 85, 74, 251, 228, 249, 115, 210, 53, 59, 217, 130, 39, 173, 222, 247, 132, 187, 135, 1, 22, 144, 40, 120, 128, 112, 185, 219, 113, 177, 64, 189, 188, 118, 245, 188, 51, 145, 105, 225, 137, 68, 95, 243, 132, 6, 46, 245, 218, 123, 33, 255, 248, 65, 145, 147, 32, 117, 221, 214, 158, 29, 90, 183, 176, 84, 27, 147, 118, 77, 20, 71, 55, 204, 38, 107, 162, 139, 12, 166, 27, 16, 178, 91, 4, 65, 236, 4, 142, 105, 78, 32, 135, 60, 148, 92, 33, 72, 127, 131, 198, 128, 130, 200, 137, 88, 104, 145, 54, 40, 128, 112, 49, 95, 238, 88, 182, 100, 129, 88, 71, 237, 15, 97, 168, 36, 206, 78, 72, 50, 24, 251, 103, 10, 24, 37, 173, 57, 1, 246, 54, 203, 249, 139, 102, 181, 223, 162, 29, 94, 132, 6, 239, 168, 117, 87, 41, 90, 170, 198, 28, 100, 178, 37, 198, 119, 220, 5, 196, 200, 86, 218, 142, 124, 107, 30, 21, 164, 191, 119, 34, 151, 20, 68, 216, 86, 152, 143, 34, 244, 226, 187, 132, 42, 24, 87, 197, 82, 135, 47, 132, 51, 72, 16, 236, 4, 49, 157, 17, 132, 77, 179, 156, 176, 217, 216, 53, 222, 98, 166, 12, 157, 148, 129, 249, 152, 193, 101, 125, 194, 136, 141, 28, 51, 131, 140, 75, 200, 243, 92, 215, 152, 150, 33, 205, 129, 38, 156, 47, 139, 107, 20, 69, 155, 200, 129, 209, 84, 26, 52, 162, 152, 142, 113, 68, 96, 65, 27, 15, 47, 52, 155, 166, 15, 36, 148, 178, 177, 72, 138, 23, 226, 165, 214, 16, 18, 69, 154, 77, 217, 38, 52, 59, 127, 84, 34, 240, 34, 0, 242, 124, 108, 198, 5, 113, 100, 67, 48, 117, 40, 152, 241, 128, 10, 197, 74, 54, 202, 198, 204, 101, 90, 132, 57, 234, 13, 33, 84, 3, 45, 2, 0, 0, 0, 0, 0, 0, 0, 208, 239, 22, 1, 0, 0, 0, 0, 66, 4, 181, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 76, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 6, 150, 98, 0, 0, 0, 0, 216, 131, 1, 1, 10, 132, 103, 101, 116, 104, 136, 103, 111, 49, 46, 49, 51, 46, 52, 133, 108, 105, 110, 117, 120, 0, 0, 0, 195, 22, 123, 223, 1, 36, 101, 23, 108, 70, 26, 251, 49, 110, 188, 119, 60, 97, 250, 238, 133, 166, 81, 93, 170, 41, 94, 38, 73, 92, 239, 111, 105, 223, 166, 153, 17, 217, 216, 228, 243, 187, 173, 184, 155, 41, 169, 124, 110, 255, 184, 164, 17, 218, 188, 106, 222, 239, 170, 132, 245, 6, 124, 139, 190, 45, 76, 64, 123, 190, 73, 67, 142, 216, 89, 254, 150, 91, 20, 13, 207, 26, 171, 113, 169, 63, 52, 155, 186, 254, 193, 85, 24, 25, 184, 190, 30, 254, 162, 252, 70, 202, 116, 154, 161, 104, 91, 29, 237, 128, 19, 120, 93, 102, 35, 204, 24, 210, 20, 50, 11, 107, 182, 71, 89, 112, 246, 87, 22, 78, 91, 117, 104, 155, 100, 183, 253, 31, 162, 117, 243, 52, 242, 142, 24, 114, 182, 28, 96, 20, 52, 45, 145, 68, 112, 236, 122, 194, 151, 91, 227, 69, 121, 108, 43, 122, 226, 245, 185, 227, 134, 205, 27, 80, 164, 85, 6, 150, 217, 87, 203, 73, 0, 240, 58, 139, 108, 143, 217, 61, 111, 76, 234, 66, 187, 179, 69, 219, 198, 240, 223, 219, 91, 236, 115, 159, 140, 205, 175, 204, 57, 243, 199, 214, 235, 246, 55, 201, 21, 22, 115, 203, 195, 107, 136, 166, 247, 155, 96, 53, 159, 20, 29, 249, 10, 12, 116, 81, 37, 177, 49, 202, 175, 253, 18, 170, 207, 106, 129, 25, 247, 225, 22, 35, 181, 164, 61, 166, 56, 233, 31, 102, 154, 19, 15, 172, 14, 21, 160, 56, 238, 223, 198, 139, 163, 195, 92, 115, 254, 213, 190, 74, 7, 175, 181, 190, 128, 125, 221, 176, 116, 99, 156, 217, 250, 97, 180, 118, 118, 192, 100, 252, 80, 214, 44, 206, 47, 215, 84, 78, 11, 44, 201, 70, 146, 212, 167, 4, 222, 190, 247, 188, 182, 19, 40, 226, 211, 167, 57, 239, 252, 211, 169, 147, 135, 208, 21, 226, 96, 238, 250, 199, 46, 190, 161, 233, 174, 50, 97, 164, 117, 162, 123, 177, 2, 143, 20, 11, 194, 167, 200, 67, 49, 138, 253, 234, 10, 110, 60, 81, 27, 189, 16, 244, 81, 158, 206, 55, 220, 36, 136, 126, 17, 181, 93, 238, 34, 99, 121, 219, 131, 207, 252, 104, 20, 149, 115, 12, 17, 253, 222, 121, 186, 76, 12, 239, 2, 116, 227, 24, 16, 201, 223, 2, 249, 143, 175, 222, 15, 132, 31, 78, 102, 161, 205, 225, 206, 184, 239, 238, 202, 255, 50, 251, 159, 138, 97, 5, 58, 86, 182, 9, 161, 87, 207, 150, 92, 169, 210, 124, 241, 138, 38, 231, 125, 95, 161, 53, 36, 241, 62, 46, 53, 4, 34, 63, 237, 21, 254, 35, 7, 184, 249, 167, 176, 60, 144, 109, 135, 11, 164, 81, 91, 237, 98, 17, 37, 81, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    const BLOCK_401: [u8; 670] = [56, 0, 0, 0, 0, 0, 0, 0, 157, 55, 33, 33, 7, 157, 246, 28, 81, 79, 213, 77, 3, 174, 185, 11, 47, 217, 59, 3, 37, 100, 176, 127, 252, 221, 248, 96, 159, 76, 14, 187, 29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66, 253, 64, 212, 147, 71, 112, 246, 87, 22, 78, 91, 117, 104, 155, 100, 183, 253, 31, 162, 117, 243, 52, 242, 142, 24, 37, 209, 13, 243, 0, 150, 68, 226, 184, 199, 193, 100, 250, 135, 62, 209, 221, 106, 215, 5, 124, 148, 40, 114, 161, 127, 177, 201, 45, 94, 221, 213, 156, 54, 2, 248, 153, 215, 179, 203, 189, 125, 67, 197, 96, 4, 125, 62, 138, 120, 19, 175, 172, 197, 236, 223, 77, 21, 236, 68, 150, 70, 92, 97, 14, 42, 56, 108, 175, 38, 49, 227, 152, 16, 194, 6, 72, 201, 200, 88, 158, 146, 38, 255, 108, 243, 18, 209, 37, 254, 249, 89, 246, 181, 207, 85, 48, 126, 223, 249, 106, 230, 217, 28, 246, 88, 165, 14, 255, 212, 247, 255, 247, 198, 206, 188, 231, 167, 111, 62, 219, 127, 254, 159, 126, 253, 87, 115, 85, 245, 84, 235, 245, 23, 247, 254, 199, 190, 115, 237, 199, 83, 157, 239, 123, 121, 151, 249, 175, 231, 253, 19, 113, 205, 170, 63, 61, 119, 173, 65, 175, 165, 36, 249, 249, 103, 118, 183, 229, 187, 230, 191, 223, 230, 235, 187, 255, 30, 159, 213, 247, 216, 235, 10, 250, 190, 142, 104, 217, 111, 47, 109, 239, 31, 246, 254, 175, 246, 25, 95, 118, 251, 83, 223, 14, 63, 191, 247, 250, 153, 187, 251, 140, 187, 191, 237, 51, 110, 81, 115, 207, 157, 247, 189, 243, 236, 225, 95, 254, 187, 254, 230, 12, 248, 126, 164, 123, 247, 254, 188, 222, 127, 230, 165, 248, 251, 247, 111, 185, 189, 251, 253, 138, 207, 91, 241, 239, 175, 148, 46, 189, 155, 251, 228, 39, 250, 73, 157, 118, 143, 253, 231, 170, 238, 87, 195, 237, 239, 35, 100, 239, 230, 123, 223, 111, 250, 243, 239, 233, 245, 119, 151, 63, 177, 152, 211, 255, 168, 80, 242, 89, 122, 247, 246, 127, 207, 235, 107, 210, 113, 118, 189, 190, 238, 233, 91, 95, 247, 162, 127, 95, 241, 183, 255, 126, 250, 150, 126, 117, 124, 158, 223, 252, 120, 119, 229, 217, 237, 239, 95, 221, 197, 223, 110, 124, 63, 222, 189, 120, 74, 142, 29, 2, 0, 0, 0, 0, 0, 0, 0, 209, 239, 22, 1, 0, 0, 0, 0, 69, 185, 186, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 42, 83, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 6, 150, 98, 0, 0, 0, 0, 216, 131, 1, 1, 10, 132, 103, 101, 116, 104, 136, 103, 111, 49, 46, 49, 51, 46, 52, 133, 108, 105, 110, 117, 120, 0, 0, 0, 195, 22, 123, 223, 0, 176, 79, 163, 192, 193, 149, 218, 254, 196, 86, 217, 223, 186, 240, 8, 64, 180, 10, 142, 234, 169, 13, 227, 6, 35, 249, 232, 136, 253, 101, 75, 119, 94, 195, 203, 200, 52, 34, 95, 171, 187, 62, 90, 12, 131, 242, 13, 111, 235, 86, 11, 1, 10, 80, 33, 110, 152, 53, 107, 20, 50, 229, 40, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    const INVALID_SIG: [u8; 1090] = [56, 0, 0, 0, 0, 0, 0, 0, 243, 247, 170, 68, 94, 168, 240, 122, 56, 249, 106, 176, 222, 159, 140, 206, 75, 214, 28, 179, 0, 127, 181, 255, 43, 170, 245, 85, 13, 65, 195, 143, 29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66, 253, 64, 212, 147, 71, 104, 91, 29, 237, 128, 19, 120, 93, 102, 35, 204, 24, 210, 20, 50, 11, 107, 182, 71, 89, 141, 253, 180, 148, 144, 234, 70, 80, 154, 228, 41, 94, 91, 251, 174, 37, 162, 39, 239, 158, 208, 78, 72, 85, 74, 251, 228, 249, 115, 210, 53, 59, 217, 130, 39, 173, 222, 247, 132, 187, 135, 1, 22, 144, 40, 120, 128, 112, 185, 219, 113, 177, 64, 189, 188, 118, 245, 188, 51, 145, 105, 225, 137, 68, 95, 243, 132, 6, 46, 245, 218, 123, 33, 255, 248, 65, 145, 147, 32, 117, 221, 214, 158, 29, 90, 183, 176, 84, 27, 147, 118, 77, 20, 71, 55, 204, 38, 107, 162, 139, 12, 166, 27, 16, 178, 91, 4, 65, 236, 4, 142, 105, 78, 32, 135, 60, 148, 92, 33, 72, 127, 131, 198, 128, 130, 200, 137, 88, 104, 145, 54, 40, 128, 112, 49, 95, 238, 88, 182, 100, 129, 88, 71, 237, 15, 97, 168, 36, 206, 78, 72, 50, 24, 251, 103, 10, 24, 37, 173, 57, 1, 246, 54, 203, 249, 139, 102, 181, 223, 162, 29, 94, 132, 6, 239, 168, 117, 87, 41, 90, 170, 198, 28, 100, 178, 37, 198, 119, 220, 5, 196, 200, 86, 218, 142, 124, 107, 30, 21, 164, 191, 119, 34, 151, 20, 68, 216, 86, 152, 143, 34, 244, 226, 187, 132, 42, 24, 87, 197, 82, 135, 47, 132, 51, 72, 16, 236, 4, 49, 157, 17, 132, 77, 179, 156, 176, 217, 216, 53, 222, 98, 166, 12, 157, 148, 129, 249, 152, 193, 101, 125, 194, 136, 141, 28, 51, 131, 140, 75, 200, 243, 92, 215, 152, 150, 33, 205, 129, 38, 156, 47, 139, 107, 20, 69, 155, 200, 129, 209, 84, 26, 52, 162, 152, 142, 113, 68, 96, 65, 27, 15, 47, 52, 155, 166, 15, 36, 148, 178, 177, 72, 138, 23, 226, 165, 214, 16, 18, 69, 154, 77, 217, 38, 52, 59, 127, 84, 34, 240, 34, 0, 242, 124, 108, 198, 5, 113, 100, 67, 48, 117, 40, 152, 241, 128, 10, 197, 74, 54, 202, 198, 204, 101, 90, 132, 57, 234, 13, 33, 84, 3, 45, 2, 0, 0, 0, 0, 0, 0, 0, 208, 239, 22, 1, 0, 0, 0, 0, 66, 4, 181, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 76, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 6, 150, 98, 0, 0, 0, 0, 216, 131, 1, 1, 10, 132, 103, 101, 116, 104, 136, 103, 111, 49, 46, 49, 51, 46, 52, 133, 108, 105, 110, 117, 120, 0, 0, 0, 195, 22, 123, 223, 1, 36, 101, 23, 108, 70, 26, 251, 49, 110, 188, 119, 60, 97, 250, 238, 133, 166, 81, 93, 170, 41, 94, 38, 73, 92, 239, 111, 105, 223, 166, 153, 17, 217, 216, 228, 243, 187, 173, 184, 155, 41, 169, 124, 110, 255, 184, 164, 17, 218, 188, 106, 222, 239, 170, 132, 245, 6, 124, 139, 190, 45, 76, 64, 123, 190, 73, 67, 142, 216, 89, 254, 150, 91, 20, 13, 207, 26, 171, 113, 169, 63, 52, 155, 186, 254, 193, 85, 24, 25, 184, 190, 30, 254, 162, 252, 70, 202, 116, 154, 161, 104, 91, 29, 237, 128, 19, 120, 93, 102, 35, 204, 24, 210, 20, 50, 11, 107, 182, 71, 89, 112, 246, 87, 22, 78, 91, 117, 104, 155, 100, 183, 253, 31, 162, 117, 243, 52, 242, 142, 24, 114, 182, 28, 96, 20, 52, 45, 145, 68, 112, 236, 122, 194, 151, 91, 227, 69, 121, 108, 43, 122, 226, 245, 185, 227, 134, 205, 27, 80, 164, 85, 6, 150, 217, 87, 203, 73, 0, 240, 58, 139, 108, 143, 217, 61, 111, 76, 234, 66, 187, 179, 69, 219, 198, 240, 223, 219, 91, 236, 115, 159, 140, 205, 175, 204, 57, 243, 199, 214, 235, 246, 55, 201, 21, 22, 115, 203, 195, 107, 136, 166, 247, 155, 96, 53, 159, 20, 29, 249, 10, 12, 116, 81, 37, 177, 49, 202, 175, 253, 18, 170, 207, 106, 129, 25, 247, 225, 22, 35, 181, 164, 61, 166, 56, 233, 31, 102, 154, 19, 15, 172, 14, 21, 160, 56, 238, 223, 198, 139, 163, 195, 92, 115, 254, 213, 190, 74, 7, 175, 181, 190, 128, 125, 221, 176, 116, 99, 156, 217, 250, 97, 180, 118, 118, 192, 100, 252, 80, 214, 44, 206, 47, 215, 84, 78, 11, 44, 201, 70, 146, 212, 167, 4, 222, 190, 247, 188, 182, 19, 40, 226, 211, 167, 57, 239, 252, 211, 169, 147, 135, 208, 21, 226, 96, 238, 250, 199, 46, 190, 161, 233, 174, 50, 97, 164, 117, 162, 123, 177, 2, 143, 20, 11, 194, 167, 200, 67, 49, 138, 253, 234, 10, 110, 60, 81, 27, 189, 16, 244, 81, 158, 206, 55, 220, 36, 136, 126, 17, 181, 93, 238, 34, 99, 121, 219, 131, 207, 252, 104, 20, 149, 115, 12, 17, 253, 222, 121, 186, 76, 12, 239, 2, 116, 227, 24, 16, 201, 223, 2, 249, 143, 175, 222, 15, 132, 31, 78, 102, 161, 205, 225, 206, 184, 239, 238, 202, 255, 50, 251, 159, 138, 97, 5, 58, 86, 182, 9, 161, 87, 207, 150, 92, 169, 210, 124, 241, 138, 38, 231, 125, 95, 161, 53, 36, 241, 62, 46, 53, 4, 34, 63, 237, 21, 254, 35, 7, 184, 249, 167, 176, 60, 144, 109, 135, 11, 164, 81, 91, 237, 98, 17, 37, 81, 231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    const CORRUPT_HEADER: [u8; 1089] = [0, 0, 0, 0, 0, 0, 0, 243, 247, 170, 68, 94, 168, 240, 122, 56, 249, 106, 176, 222, 159, 140, 206, 75, 214, 28, 179, 0, 127, 181, 255, 43, 170, 245, 85, 13, 65, 195, 143, 29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66, 253, 64, 212, 147, 71, 104, 91, 29, 237, 128, 19, 120, 93, 102, 35, 204, 24, 210, 20, 50, 11, 107, 182, 71, 89, 141, 253, 180, 148, 144, 234, 70, 80, 154, 228, 41, 94, 91, 251, 174, 37, 162, 39, 239, 158, 208, 78, 72, 85, 74, 251, 228, 249, 115, 210, 53, 59, 217, 130, 39, 173, 222, 247, 132, 187, 135, 1, 22, 144, 40, 120, 128, 112, 185, 219, 113, 177, 64, 189, 188, 118, 245, 188, 51, 145, 105, 225, 137, 68, 95, 243, 132, 6, 46, 245, 218, 123, 33, 255, 248, 65, 145, 147, 32, 117, 221, 214, 158, 29, 90, 183, 176, 84, 27, 147, 118, 77, 20, 71, 55, 204, 38, 107, 162, 139, 12, 166, 27, 16, 178, 91, 4, 65, 236, 4, 142, 105, 78, 32, 135, 60, 148, 92, 33, 72, 127, 131, 198, 128, 130, 200, 137, 88, 104, 145, 54, 40, 128, 112, 49, 95, 238, 88, 182, 100, 129, 88, 71, 237, 15, 97, 168, 36, 206, 78, 72, 50, 24, 251, 103, 10, 24, 37, 173, 57, 1, 246, 54, 203, 249, 139, 102, 181, 223, 162, 29, 94, 132, 6, 239, 168, 117, 87, 41, 90, 170, 198, 28, 100, 178, 37, 198, 119, 220, 5, 196, 200, 86, 218, 142, 124, 107, 30, 21, 164, 191, 119, 34, 151, 20, 68, 216, 86, 152, 143, 34, 244, 226, 187, 132, 42, 24, 87, 197, 82, 135, 47, 132, 51, 72, 16, 236, 4, 49, 157, 17, 132, 77, 179, 156, 176, 217, 216, 53, 222, 98, 166, 12, 157, 148, 129, 249, 152, 193, 101, 125, 194, 136, 141, 28, 51, 131, 140, 75, 200, 243, 92, 215, 152, 150, 33, 205, 129, 38, 156, 47, 139, 107, 20, 69, 155, 200, 129, 209, 84, 26, 52, 162, 152, 142, 113, 68, 96, 65, 27, 15, 47, 52, 155, 166, 15, 36, 148, 178, 177, 72, 138, 23, 226, 165, 214, 16, 18, 69, 154, 77, 217, 38, 52, 59, 127, 84, 34, 240, 34, 0, 242, 124, 108, 198, 5, 113, 100, 67, 48, 117, 40, 152, 241, 128, 10, 197, 74, 54, 202, 198, 204, 101, 90, 132, 57, 234, 13, 33, 84, 3, 45, 2, 0, 0, 0, 0, 0, 0, 0, 208, 239, 22, 1, 0, 0, 0, 0, 66, 4, 181, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 76, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 6, 150, 98, 0, 0, 0, 0, 216, 131, 1, 1, 10, 132, 103, 101, 116, 104, 136, 103, 111, 49, 46, 49, 51, 46, 52, 133, 108, 105, 110, 117, 120, 0, 0, 0, 195, 22, 123, 223, 1, 36, 101, 23, 108, 70, 26, 251, 49, 110, 188, 119, 60, 97, 250, 238, 133, 166, 81, 93, 170, 41, 94, 38, 73, 92, 239, 111, 105, 223, 166, 153, 17, 217, 216, 228, 243, 187, 173, 184, 155, 41, 169, 124, 110, 255, 184, 164, 17, 218, 188, 106, 222, 239, 170, 132, 245, 6, 124, 139, 190, 45, 76, 64, 123, 190, 73, 67, 142, 216, 89, 254, 150, 91, 20, 13, 207, 26, 171, 113, 169, 63, 52, 155, 186, 254, 193, 85, 24, 25, 184, 190, 30, 254, 162, 252, 70, 202, 116, 154, 161, 104, 91, 29, 237, 128, 19, 120, 93, 102, 35, 204, 24, 210, 20, 50, 11, 107, 182, 71, 89, 112, 246, 87, 22, 78, 91, 117, 104, 155, 100, 183, 253, 31, 162, 117, 243, 52, 242, 142, 24, 114, 182, 28, 96, 20, 52, 45, 145, 68, 112, 236, 122, 194, 151, 91, 227, 69, 121, 108, 43, 122, 226, 245, 185, 227, 134, 205, 27, 80, 164, 85, 6, 150, 217, 87, 203, 73, 0, 240, 58, 139, 108, 143, 217, 61, 111, 76, 234, 66, 187, 179, 69, 219, 198, 240, 223, 219, 91, 236, 115, 159, 140, 205, 175, 204, 57, 243, 199, 214, 235, 246, 55, 201, 21, 22, 115, 203, 195, 107, 136, 166, 247, 155, 96, 53, 159, 20, 29, 249, 10, 12, 116, 81, 37, 177, 49, 202, 175, 253, 18, 170, 207, 106, 129, 25, 247, 225, 22, 35, 181, 164, 61, 166, 56, 233, 31, 102, 154, 19, 15, 172, 14, 21, 160, 56, 238, 223, 198, 139, 163, 195, 92, 115, 254, 213, 190, 74, 7, 175, 181, 190, 128, 125, 221, 176, 116, 99, 156, 217, 250, 97, 180, 118, 118, 192, 100, 252, 80, 214, 44, 206, 47, 215, 84, 78, 11, 44, 201, 70, 146, 212, 167, 4, 222, 190, 247, 188, 182, 19, 40, 226, 211, 167, 57, 239, 252, 211, 169, 147, 135, 208, 21, 226, 96, 238, 250, 199, 46, 190, 161, 233, 174, 50, 97, 164, 117, 162, 123, 177, 2, 143, 20, 11, 194, 167, 200, 67, 49, 138, 253, 234, 10, 110, 60, 81, 27, 189, 16, 244, 81, 158, 206, 55, 220, 36, 136, 126, 17, 181, 93, 238, 34, 99, 121, 219, 131, 207, 252, 104, 20, 149, 115, 12, 17, 253, 222, 121, 186, 76, 12, 239, 2, 116, 227, 24, 16, 201, 223, 2, 249, 143, 175, 222, 15, 132, 31, 78, 102, 161, 205, 225, 206, 184, 239, 238, 202, 255, 50, 251, 159, 138, 97, 5, 58, 86, 182, 9, 161, 87, 207, 150, 92, 169, 210, 124, 241, 138, 38, 231, 125, 95, 161, 53, 36, 241, 62, 46, 53, 4, 34, 63, 237, 21, 254, 35, 7, 184, 249, 167, 176, 60, 144, 109, 135, 11, 164, 81, 91, 237, 98, 17, 37, 81, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

    // Receipts for testing
    const RECEIPT_400: [u8; 440] = [1,98,216,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,92,67,36,3,157,169,28,82,197,93,245,215,133,56,90,171,7,61,207,12,221,242,82,173,27,226,200,155,105,194,176,104,252,55,141,170,149,43,167,241,99,196,161,22,40,245,90,77,245,35,179,239,0,0,0,0,0,0,0,0,0,0,0,0,69,34,93,53,54,172,2,146,143,22,7,26,176,80,102,188,233,92,44,213,0,0,0,0,0,0,0,0,0,0,0,0,255,122,224,66,69,43,5,132,229,17,109,14,153,33,238,211,37,21,12,22,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,214,245,95,16,52,104,0];
    const PROOF_400: [u8; 1282] = [12,209,4,249,1,49,160,86,132,220,17,195,212,250,27,162,245,193,68,171,138,4,197,211,108,97,45,194,157,207,143,193,199,208,41,147,139,231,223,160,215,136,212,98,37,236,95,218,188,213,63,95,123,137,182,52,229,192,191,81,16,148,166,122,21,166,186,162,197,54,129,73,160,50,61,111,195,180,138,33,29,62,222,98,136,183,249,241,95,111,97,30,215,197,0,200,66,107,236,236,88,81,74,152,72,160,240,200,46,88,60,244,94,149,203,81,87,100,79,230,101,204,158,202,115,116,217,102,54,34,55,244,22,202,92,237,193,212,160,156,15,220,133,51,133,228,189,31,134,61,17,122,104,120,132,236,68,20,1,213,128,72,132,252,196,32,139,212,167,50,79,160,209,146,141,170,150,201,86,84,41,125,55,3,135,58,5,247,27,225,38,116,187,125,103,118,23,112,131,59,45,161,188,97,160,180,173,188,137,53,81,30,149,196,196,4,143,152,60,119,11,49,169,24,173,2,118,118,66,168,246,4,20,98,144,225,138,160,79,217,183,86,176,10,70,190,31,172,253,22,153,29,138,91,242,125,155,105,77,26,216,85,7,134,58,141,69,45,51,92,160,157,151,129,34,116,159,78,68,243,49,126,254,215,176,0,99,211,100,141,22,150,127,211,216,211,138,49,231,99,244,107,169,128,128,128,128,128,128,128,128,81,8,249,2,17,160,169,81,88,13,54,213,36,164,205,51,0,101,154,193,218,254,198,224,154,105,87,203,161,23,112,5,157,246,7,49,193,93,160,133,13,102,21,69,215,241,0,158,202,189,174,172,36,10,137,180,82,211,245,130,153,49,143,212,243,22,168,165,187,193,220,160,131,166,197,103,203,111,14,64,124,165,5,227,95,70,233,176,77,30,29,131,161,16,197,122,146,76,171,13,26,140,205,228,160,203,109,12,210,133,166,57,99,194,74,94,95,237,122,72,247,230,165,132,26,113,64,176,53,180,199,212,47,237,168,140,219,160,31,66,131,73,181,100,76,38,4,195,124,12,7,243,91,94,152,175,164,89,240,130,149,127,218,139,0,221,196,244,237,247,160,78,204,90,149,44,133,229,155,109,187,23,118,208,176,20,185,88,196,169,114,44,2,186,115,18,248,69,24,89,169,137,148,160,207,26,157,148,70,57,67,161,127,186,121,80,213,253,167,222,118,43,173,122,56,252,118,164,215,38,112,242,41,66,15,29,160,54,150,164,0,225,196,48,222,226,52,133,116,127,71,229,189,17,217,113,36,146,181,251,126,20,63,187,80,48,218,199,63,160,50,157,25,119,100,134,44,174,163,0,90,202,139,211,239,168,133,82,31,133,101,182,143,25,169,248,253,230,127,96,182,5,160,61,169,98,179,40,153,231,71,114,43,120,162,255,149,190,41,168,234,238,111,210,22,247,182,124,132,14,150,127,58,13,18,160,119,71,196,209,133,220,174,246,89,192,253,176,22,59,185,112,113,125,175,121,26,206,48,81,68,44,63,146,109,73,112,164,160,206,223,227,3,45,177,226,148,154,166,71,116,201,199,132,92,38,133,11,69,65,150,170,34,16,141,36,137,25,44,164,123,160,15,120,235,255,255,115,146,84,91,234,225,114,190,224,8,248,163,126,157,187,32,198,200,118,176,144,70,28,249,16,107,81,160,164,247,105,92,239,108,168,83,203,62,116,141,79,38,11,154,207,0,175,39,189,120,88,188,98,167,42,186,230,56,189,146,160,61,41,103,215,203,132,145,101,137,185,203,107,193,211,233,182,2,31,135,5,205,59,208,98,187,144,33,102,170,2,150,226,160,116,35,74,208,253,204,228,200,245,180,78,104,24,146,238,169,253,11,110,138,173,250,82,210,131,153,0,92,163,62,200,107,128,197,6,249,1,174,32,185,1,170,249,1,167,1,131,185,216,98,185,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,157,248,155,148,4,92,67,36,3,157,169,28,82,197,93,245,215,133,56,90,171,7,61,207,248,99,160,221,242,82,173,27,226,200,155,105,194,176,104,252,55,141,170,149,43,167,241,99,196,161,22,40,245,90,77,245,35,179,239,160,0,0,0,0,0,0,0,0,0,0,0,0,69,34,93,53,54,172,2,146,143,22,7,26,176,80,102,188,233,92,44,213,160,0,0,0,0,0,0,0,0,0,0,0,0,255,122,224,66,69,43,5,132,229,17,109,14,153,33,238,211,37,21,12,22,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,214,245,95,16,52,104,0,4,111];
    const PROOF_INVALID_PATH: [u8; 1282] = [12,209,4,249,1,49,160,86,132,22,17,195,212,250,27,162,245,193,68,171,138,4,197,211,108,97,45,194,157,207,143,193,199,208,41,147,139,231,223,160,215,136,212,98,37,236,95,218,188,213,63,95,123,137,182,52,229,192,191,81,16,148,166,122,21,166,186,162,197,54,129,73,160,50,61,111,195,180,138,33,29,62,222,98,136,183,249,241,95,111,97,30,215,197,0,200,66,107,236,236,88,81,74,152,72,160,240,200,46,88,60,244,94,149,203,81,87,100,79,230,101,204,158,202,115,116,217,102,54,34,55,244,22,202,92,237,193,212,160,156,15,220,133,51,133,228,189,31,134,61,17,122,104,120,132,236,68,20,1,213,128,72,132,252,196,32,139,212,167,50,79,160,209,146,141,170,150,201,86,84,41,125,55,3,135,58,5,247,27,225,38,116,187,125,103,118,23,112,131,59,45,161,188,97,160,180,173,188,137,53,81,30,149,196,196,4,143,152,60,119,11,49,169,24,173,2,118,118,66,168,246,4,20,98,144,225,138,160,79,217,183,86,176,10,70,190,31,172,253,22,153,29,138,91,242,125,155,105,77,26,216,85,7,134,58,141,69,45,51,92,160,157,151,129,34,116,159,78,68,243,49,126,254,215,176,0,99,211,100,141,22,150,127,211,216,211,138,49,231,99,244,107,169,128,128,128,128,128,128,128,128,81,8,249,2,17,160,169,81,88,13,54,213,36,164,205,51,0,101,154,193,218,254,198,224,154,105,87,203,161,23,112,5,157,246,7,49,193,93,160,133,13,102,21,69,215,241,0,158,202,189,174,172,36,10,137,180,82,211,245,130,153,49,143,212,243,22,168,165,187,193,220,160,131,166,197,103,203,111,14,64,124,165,5,227,95,70,233,176,77,30,29,131,161,16,197,122,146,76,171,13,26,140,205,228,160,203,109,12,210,133,166,57,99,194,74,94,95,237,122,72,247,230,165,132,26,113,64,176,53,180,199,212,47,237,168,140,219,160,31,66,131,73,181,100,76,38,4,195,124,12,7,243,91,94,152,175,164,89,240,130,149,127,218,139,0,221,196,244,237,247,160,78,204,90,149,44,133,229,155,109,187,23,118,208,176,20,185,88,196,169,114,44,2,186,115,18,248,69,24,89,169,137,148,160,207,26,157,148,70,57,67,161,127,186,121,80,213,253,167,222,118,43,173,122,56,252,118,164,215,38,112,242,41,66,15,29,160,54,150,164,0,225,196,48,222,226,52,133,116,127,71,229,189,17,217,113,36,146,181,251,126,20,63,187,80,48,218,199,63,160,50,157,25,119,100,134,44,174,163,0,90,202,139,211,239,168,133,82,31,133,101,182,143,25,169,248,253,230,127,96,182,5,160,61,169,98,179,40,153,231,71,114,43,120,162,255,149,190,41,168,234,238,111,210,22,247,182,124,132,14,150,127,58,13,18,160,119,71,196,209,133,220,174,246,89,192,253,176,22,59,185,112,113,125,175,121,26,206,48,81,68,44,63,146,109,73,112,164,160,206,223,227,3,45,177,226,148,154,166,71,116,201,199,132,92,38,133,11,69,65,150,170,34,16,141,36,137,25,44,164,123,160,15,120,235,255,255,115,146,84,91,234,225,114,190,224,8,248,163,126,157,187,32,198,200,118,176,144,70,28,249,16,107,81,160,164,247,105,92,239,108,168,83,203,62,116,141,79,38,11,154,207,0,175,39,189,120,88,188,98,167,42,186,230,56,189,146,160,61,41,103,215,203,132,145,101,137,185,203,107,193,211,233,182,2,31,135,5,205,59,208,98,187,144,33,102,170,2,150,226,160,116,35,74,208,253,204,228,200,245,180,78,104,24,146,238,169,253,11,110,138,173,250,82,210,131,153,0,92,163,62,200,107,128,197,6,249,1,174,32,185,1,170,249,1,167,1,131,185,216,98,185,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,157,248,155,148,4,92,67,36,3,157,169,28,82,197,93,245,215,133,56,90,171,7,61,207,248,99,160,221,242,82,173,27,226,200,155,105,194,176,104,252,55,141,170,149,43,167,241,99,196,161,22,40,245,90,77,245,35,179,239,160,0,0,0,0,0,0,0,0,0,0,0,0,69,34,93,53,54,172,2,146,143,22,7,26,176,80,102,188,233,92,44,213,160,0,0,0,0,0,0,0,0,0,0,0,0,255,122,224,66,69,43,5,132,229,17,109,14,153,33,238,211,37,21,12,22,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,214,245,95,16,52,104,0,4,111];
    const PROOF_INVALID_INDEX: [u8; 1282] = [12,209,4,249,1,49,160,86,132,220,17,195,212,250,27,162,245,193,68,171,138,4,197,211,108,97,45,194,157,207,143,193,199,208,41,147,139,231,223,160,215,136,212,98,37,236,95,218,188,213,63,95,123,137,182,52,229,192,191,81,16,148,166,122,21,166,186,162,197,54,129,73,160,50,61,111,195,180,138,33,29,62,222,98,136,183,249,241,95,111,97,30,215,197,0,200,66,107,236,236,88,81,74,152,72,160,240,200,46,88,60,244,94,149,203,81,87,100,79,230,101,204,158,202,115,116,217,102,54,34,55,244,22,202,92,237,193,212,160,156,15,220,133,51,133,228,189,31,134,61,17,122,104,120,132,236,68,20,1,213,128,72,132,252,196,32,139,212,167,50,79,160,209,146,141,170,150,201,86,84,41,125,55,3,135,58,5,247,27,225,38,116,187,125,103,118,23,112,131,59,45,161,188,97,160,180,173,188,137,53,81,30,149,196,196,4,143,152,60,119,11,49,169,24,173,2,118,118,66,168,246,4,20,98,144,225,138,160,79,217,183,86,176,10,70,190,31,172,253,22,153,29,138,91,242,125,155,105,77,26,216,85,7,134,58,141,69,45,51,92,160,157,151,129,34,116,159,78,68,243,49,126,254,215,176,0,99,211,100,141,22,150,127,211,216,211,138,49,231,99,244,107,169,128,128,128,128,128,128,128,128,81,8,249,2,17,160,169,81,88,13,54,213,36,164,205,51,0,101,154,193,218,254,198,224,154,105,87,203,161,23,112,5,157,246,7,49,193,93,160,133,13,102,21,69,215,241,0,158,202,189,174,172,36,10,137,180,82,211,245,130,153,49,143,212,243,22,168,165,187,193,220,160,131,166,197,103,203,111,14,64,124,165,5,227,95,70,233,176,77,30,29,131,161,16,197,122,146,76,171,13,26,140,205,228,160,203,109,12,210,133,166,57,99,194,74,94,95,237,122,72,247,230,165,132,26,113,64,176,53,180,199,212,47,237,168,140,219,160,31,66,131,73,181,100,76,38,4,195,124,12,7,243,91,94,152,175,164,89,240,130,149,127,218,139,0,221,196,244,237,247,160,78,204,90,149,44,133,229,155,109,187,23,118,208,176,20,185,88,196,169,114,44,2,186,115,18,248,69,24,89,169,137,148,160,207,26,157,148,70,57,67,161,127,186,121,80,213,253,167,222,118,43,173,122,56,252,118,164,215,38,112,242,41,66,15,29,160,54,150,164,0,225,196,48,222,226,52,133,116,127,71,229,189,17,217,113,36,146,181,251,126,20,63,187,80,48,218,199,63,160,50,157,25,119,100,134,44,174,163,0,90,202,139,211,239,168,133,82,31,133,101,182,143,25,169,248,253,230,127,96,182,5,160,61,169,98,179,40,153,231,71,114,43,120,162,255,149,190,41,168,234,238,111,210,22,247,182,124,132,14,150,127,58,13,18,160,119,71,196,209,133,220,174,246,89,192,253,176,22,59,185,112,113,125,175,121,26,206,48,81,68,44,63,146,109,73,112,164,160,206,223,227,3,45,177,226,148,154,166,71,116,201,199,132,92,38,133,11,69,65,150,170,34,16,141,36,137,25,44,164,123,160,15,120,235,255,255,115,146,84,91,234,225,114,190,224,8,248,163,126,157,187,32,198,200,118,176,144,70,28,249,16,107,81,160,164,247,105,92,239,108,168,83,203,62,116,141,79,38,11,154,207,0,175,39,189,120,88,188,98,167,42,186,230,56,189,146,160,61,41,103,215,203,132,145,101,137,185,203,107,193,211,233,182,2,31,135,5,205,59,208,98,187,144,33,102,170,2,150,226,160,116,35,74,208,253,204,228,200,245,180,78,104,24,146,238,169,253,11,110,138,173,250,82,210,131,153,0,92,163,62,200,107,128,197,6,249,1,174,32,185,1,170,249,1,167,1,131,185,216,98,185,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,157,248,155,148,4,92,67,36,3,157,169,28,82,197,93,245,215,133,56,90,171,7,61,207,248,99,160,221,242,82,173,27,226,200,155,105,194,176,104,252,55,141,170,149,43,167,241,99,196,161,22,40,245,90,77,245,35,179,239,160,0,0,0,0,0,0,0,0,0,0,0,0,69,34,93,53,54,172,2,146,143,22,7,26,176,80,102,188,233,92,44,213,160,0,0,0,0,0,0,0,0,0,0,0,0,255,122,224,66,69,43,5,132,229,17,109,14,153,33,238,211,37,21,12,22,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,214,245,95,16,52,104,0,4,101];
    const RECEIPT_CORRUPT: [u8; 440] = [255,98,216,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,92,67,36,3,157,169,28,82,197,93,245,215,133,56,90,171,7,61,207,12,221,242,82,173,27,226,200,155,105,194,176,104,252,55,141,170,149,43,167,241,99,196,161,22,40,245,90,77,245,35,179,239,0,0,0,0,0,0,0,0,0,0,0,0,69,34,93,53,54,172,2,146,143,22,7,26,176,80,102,188,233,92,44,213,0,0,0,0,0,0,0,0,0,0,0,0,255,122,224,66,69,43,5,132,229,17,109,14,153,33,238,211,37,21,12,22,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,214,245,95,16,52,104,0];

    #[test]
    fn decode_valid_header() {
        let header: Result<Header, _> = Decode::decode(&mut &*BLOCK_200.to_vec());
        assert_ok!(header);
    }

    #[test]
    fn decode_fails_on_invalid_encoding() {
        let header: Result<Header, _> = Decode::decode(&mut &*CORRUPT_HEADER.to_vec());
        assert!(header.is_err());
    }

    #[test]
    fn signature_valid_passed_with_epoch() {
         let header: Header = Decode::decode(&mut &*BLOCK_200.to_vec()).unwrap();
        assert_ok!(header.signature_valid());
    }

    #[test]
    fn signature_valid_passed_with_non_epoch() {
         let header: Header = Decode::decode(&mut &*BLOCK_401.to_vec()).unwrap();
        assert_ok!(header.signature_valid());
    }

    #[test]
    fn signature_valid_fails_with_invalid_signature() {
         let header: Header = Decode::decode(&mut &*INVALID_SIG.to_vec()).unwrap();
        assert_eq!(header.signature_valid(), Err(None));
    }

    #[test]
    fn hash_header_correctly() {
        let header: Header = Decode::decode(&mut &*BLOCK_400.to_vec()).unwrap();
        let expected: [u8; 32] = [247,52,9,170,125,59,101,76,55,212,188,151,200,195,161,96,11,149,197,225,205,17,2,167,158,55,78,93,142,77,144,38];
        assert_eq!(header.consensus_hash(), expected.into())
    }

    #[test]
    fn signer_valid_passed_with_valid_data() {
        let header_200: Header = Decode::decode(&mut &*BLOCK_200.to_vec()).unwrap();
        let header_300: Header = Decode::decode(&mut &*BLOCK_300.to_vec()).unwrap();
        let set = ValidatorSet {
            last_update: header_200.number,
            validators: header_200.validators.unwrap() // this is safe, as this is part of the signature
        };

        match header_300.signer_valid(&set) {
            Err(_) => assert!(false),
            _ => ()
        }
    }

    #[test]
    fn signer_valid_fails_with_incorrect_set() {
        let header_200: Header = Decode::decode(&mut &*BLOCK_200.to_vec()).unwrap();
        let header_300: Header = Decode::decode(&mut &*BLOCK_300.to_vec()).unwrap();
        let invalid_validator: [u8; 20] = [247,52,9,170,125,59,101,76,55,212,188,151,200,195,161,96,11,149,197,225];
        let set = ValidatorSet {
            last_update: header_200.number,
            validators: [invalid_validator.into(); 21]
        };

        match header_300.signer_valid(&set) {
            Ok(_) => assert!(false),
            _ => ()
        }
    }

    #[test]
    fn validator_set_authorized_passed_with_valid_data() {
        let header_200: Header = Decode::decode(&mut &*BLOCK_200.to_vec()).unwrap();
        let header_300: Header = Decode::decode(&mut &*BLOCK_300.to_vec()).unwrap();
        let set = ValidatorSet {
            last_update: header_200.number,
            validators: header_200.validators.unwrap() // this is safe, as this is part of the signature
        };

        match header_300.validator_set_authorized(set) {
            Err(_) => assert!(false),
            _ => ()
        }
    }

    #[test]
    fn validator_set_authorized_fails_with_fast_forward_block() {
        let header_200: Header = Decode::decode(&mut &*BLOCK_200.to_vec()).unwrap();
        let header_401: Header = Decode::decode(&mut &*BLOCK_401.to_vec()).unwrap();
        let set = ValidatorSet {
            last_update: header_200.number,
            validators: header_200.validators.unwrap() // this is safe, as this is part of the signature
        };

        match header_401.validator_set_authorized(set) {
            Ok(()) => assert!(false),
            _ => ()
        }
    }

    #[test]
    fn validator_set_authorized_fails_with_backwards_block() {
        let header_200: Header = Decode::decode(&mut &*BLOCK_200.to_vec()).unwrap();
        let header_400: Header = Decode::decode(&mut &*BLOCK_400.to_vec()).unwrap();
        let set = ValidatorSet {
            last_update: header_400.number,
            validators: header_400.validators.unwrap() // this is safe, as this is part of the signature
        };

        match header_200.validator_set_authorized(set) {
            Ok(()) => assert!(false),
            _ => ()
        }
    }

    #[test]
    fn decode_valid_receipt() {
        let receipt: Result<Receipt, _> = Decode::decode(&mut &*RECEIPT_400.to_vec());
        assert_ok!(receipt);
    }

    #[test]
    fn decode_fails_on_receipt() {
        let receipt: Result<Receipt, _> = Decode::decode(&mut &*RECEIPT_CORRUPT.to_vec());
        assert!(receipt.is_err());
    }

    #[test]
    fn in_block_passes_with_valid_data() {
        let header: Header = Decode::decode(&mut &*BLOCK_400.to_vec()).unwrap();
        let receipt: Receipt = Decode::decode(&mut &*RECEIPT_400.to_vec()).unwrap();
        let mut proof: Proof = Decode::decode(&mut &*PROOF_400.to_vec()).unwrap();

        match receipt.in_block(header.receipts_root.as_fixed_bytes(), proof) {
            Ok(_) => (),
            Err(_) => assert!(false)
        }
    }

    #[test]
    fn in_block_fails_with_invalid_proof_index() {
        let header: Header = Decode::decode(&mut &*BLOCK_400.to_vec()).unwrap();
        let receipt: Receipt = Decode::decode(&mut &*RECEIPT_400.to_vec()).unwrap();
        let mut proof: Proof = Decode::decode(&mut &*PROOF_INVALID_INDEX.to_vec()).unwrap();

        match receipt.in_block(header.receipts_root.as_fixed_bytes(), proof) {
            Ok(_) => assert!(false),
            Err(_) => ()
        }
    }

     #[test]
    fn in_block_fails_with_invalid_proof_path() {
        let header: Header = Decode::decode(&mut &*BLOCK_400.to_vec()).unwrap();
        let receipt: Receipt = Decode::decode(&mut &*RECEIPT_400.to_vec()).unwrap();
        let mut proof: Proof = Decode::decode(&mut &*PROOF_INVALID_PATH.to_vec()).unwrap();

        match receipt.in_block(header.receipts_root.as_fixed_bytes(), proof) {
            Ok(_) => assert!(false),
            Err(_) => ()
        }
    }

    #[test]
    fn in_block_fails_with_wrong_receipt_root() {
        let header: Header = Decode::decode(&mut &*BLOCK_401.to_vec()).unwrap();
        let receipt: Receipt = Decode::decode(&mut &*RECEIPT_400.to_vec()).unwrap();
        let mut proof: Proof = Decode::decode(&mut &*PROOF_400.to_vec()).unwrap();

        match receipt.in_block(header.receipts_root.as_fixed_bytes(), proof) {
            Ok(_) => assert!(false),
            Err(_) => ()
        }
    }



}
