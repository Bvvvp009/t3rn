use crate::{mock::*, Error, Validators, Headers, types::Header};
use frame_support::{assert_noop, assert_ok};
use sp_std::vec;
use sp_std::vec::Vec;
use codec::{Decode};
use sp_runtime::DispatchError;
use t3rn_primitives::bsc_finality_verifier::BinanceFV;

// Headers for testing
const BLOCK_195:[u8; 670] = [56,0,0,0,0,0,0,0,8,245,189,178,135,183,160,240,75,119,206,227,177,196,173,138,70,29,93,122,231,87,151,214,8,147,49,240,23,67,255,153,29,204,77,232,222,199,93,122,171,133,181,103,182,204,212,26,211,18,69,27,148,138,116,19,240,161,66,253,64,212,147,71,159,140,205,175,204,57,243,199,214,235,246,55,201,21,22,115,203,195,107,136,111,240,218,60,133,170,217,157,109,132,160,18,228,30,128,218,223,144,100,94,157,177,196,216,140,16,68,67,178,186,200,209,78,37,134,20,4,198,49,191,173,72,14,124,97,33,97,34,181,178,107,92,78,56,61,109,64,180,182,55,40,213,59,1,218,27,141,140,64,9,218,151,249,214,150,198,184,215,206,104,56,102,106,0,23,83,12,173,30,218,237,22,5,167,167,149,44,244,118,130,8,213,30,29,194,91,2,119,203,146,13,238,106,4,198,222,237,98,149,157,53,83,27,51,88,99,20,118,33,173,86,123,229,245,30,2,199,135,34,124,33,101,25,143,74,154,1,204,118,137,136,171,81,224,176,165,111,180,23,218,36,66,7,180,165,236,40,178,203,113,202,126,192,151,243,238,111,154,88,33,188,198,12,91,140,141,0,50,156,11,143,113,76,93,114,167,94,214,199,103,7,73,106,29,147,201,223,219,201,8,175,89,177,104,76,134,212,62,40,189,193,197,28,11,154,36,104,113,94,15,157,135,93,172,141,196,62,240,14,164,226,239,7,69,240,2,195,40,101,184,93,71,42,74,31,115,198,91,112,58,195,40,56,121,229,114,106,140,203,90,44,141,34,38,188,154,170,216,209,27,210,54,247,118,236,70,214,122,108,1,101,31,197,187,114,74,231,217,118,177,20,34,214,88,35,65,172,179,179,38,128,219,60,55,141,175,145,158,224,254,51,181,230,123,104,5,71,231,39,114,246,51,197,105,146,138,211,143,63,254,106,102,222,123,251,202,231,19,160,35,5,118,2,0,0,0,0,0,0,0,3,239,22,1,0,0,0,0,30,129,156,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,93,54,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,3,150,98,0,0,0,0,217,131,1,1,10,132,103,101,116,104,137,103,111,49,46,49,54,46,49,53,133,108,105,110,117,120,0,0,195,22,123,223,0,113,2,4,171,47,146,134,24,75,20,143,224,95,58,179,68,247,199,198,102,145,133,205,244,47,171,48,16,67,155,225,14,21,102,23,76,179,122,116,58,252,224,105,205,244,53,151,218,113,124,121,119,137,0,228,211,20,129,167,144,238,236,184,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
const BLOCK_196:[u8; 670] = [56,0,0,0,0,0,0,0,151,103,158,85,181,172,247,232,113,121,42,205,178,200,230,45,101,224,77,188,138,150,173,153,70,85,79,255,238,113,188,60,29,204,77,232,222,199,93,122,171,133,181,103,182,204,212,26,211,18,69,27,148,138,116,19,240,161,66,253,64,212,147,71,166,247,155,96,53,159,20,29,249,10,12,116,81,37,177,49,202,175,253,18,56,182,218,62,90,36,29,152,193,24,234,240,47,62,42,21,60,235,17,192,4,115,184,195,151,165,2,139,199,25,107,115,60,57,222,216,90,8,25,130,151,42,158,225,64,59,164,30,20,238,149,90,19,21,130,129,189,180,7,34,148,134,33,51,153,56,65,252,245,35,250,29,5,145,214,58,83,30,14,77,244,202,150,10,83,219,102,165,61,32,157,68,113,84,201,141,254,166,51,96,76,226,85,149,178,95,0,104,217,72,70,105,38,146,221,250,223,199,187,201,221,135,117,16,8,172,145,96,36,213,46,135,201,101,95,126,203,159,126,158,246,215,133,70,24,41,214,160,4,239,253,241,2,14,145,51,223,124,47,132,64,241,44,248,180,96,240,60,109,227,196,60,100,70,106,170,108,31,94,142,211,238,90,34,226,5,52,250,159,79,44,91,125,34,30,174,15,166,156,85,222,201,138,211,240,65,202,210,156,130,188,72,238,232,166,161,117,33,224,243,73,186,200,113,158,247,162,126,187,223,107,6,196,129,166,77,95,40,62,180,232,172,6,23,176,39,80,232,181,212,94,83,14,209,157,165,186,28,216,78,236,144,130,198,118,27,226,61,59,253,190,250,224,199,95,128,240,71,158,48,133,66,2,93,111,242,17,68,228,105,77,47,141,44,196,51,2,180,240,106,195,146,18,126,245,135,189,247,9,6,65,17,110,32,171,127,210,86,242,143,174,177,30,154,97,209,69,138,107,76,80,220,78,243,50,6,250,10,199,92,98,92,44,78,180,149,27,107,28,46,155,17,2,0,0,0,0,0,0,0,4,239,22,1,0,0,0,0,42,182,152,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,128,33,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,3,150,98,0,0,0,0,217,131,1,1,8,132,103,101,116,104,137,103,111,49,46,49,54,46,49,51,133,108,105,110,117,120,0,0,195,22,123,223,0,110,174,149,195,118,4,222,134,16,46,223,192,98,80,243,35,211,10,61,140,236,14,209,195,250,171,174,91,23,162,200,130,54,245,18,164,112,95,236,124,167,11,196,146,65,163,211,254,130,237,181,7,134,165,215,52,117,205,68,146,201,29,7,88,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
const BLOCK_197:[u8; 670] = [56,0,0,0,0,0,0,0,177,204,91,223,89,48,81,93,82,228,52,4,142,40,211,149,192,204,195,165,223,71,206,222,103,145,221,63,220,117,9,26,29,204,77,232,222,199,93,122,171,133,181,103,182,204,212,26,211,18,69,27,148,138,116,19,240,161,66,253,64,212,147,71,170,207,106,129,25,247,225,22,35,181,164,61,166,56,233,31,102,154,19,15,149,72,1,149,119,57,41,51,52,95,103,15,202,250,34,225,125,41,103,247,38,66,177,44,212,233,195,31,45,29,187,56,78,2,102,114,198,170,151,101,96,109,64,227,158,11,214,237,75,69,93,241,136,96,42,211,205,182,80,1,44,88,120,233,156,127,74,207,180,230,148,7,73,245,220,145,119,76,13,19,204,125,171,70,184,116,185,249,186,140,70,145,102,94,231,167,21,230,187,221,7,205,216,95,206,31,48,233,215,188,62,89,163,228,99,87,213,151,199,222,211,255,168,155,221,137,213,26,193,117,146,109,203,196,86,9,239,135,17,158,164,247,149,71,111,39,178,39,31,126,137,249,235,13,67,118,175,47,160,129,43,206,111,242,115,243,129,254,119,57,83,156,46,222,231,169,33,157,235,63,220,229,46,170,230,183,2,90,186,127,206,241,93,126,254,254,11,146,105,29,252,127,2,236,255,115,206,250,188,34,166,204,198,223,29,29,232,243,6,241,9,47,85,235,158,247,226,66,30,187,81,63,206,211,188,120,115,245,142,190,41,175,254,63,81,96,73,136,247,9,123,94,66,142,127,243,250,178,55,212,165,15,242,67,171,150,236,101,63,155,180,9,222,123,186,251,253,255,181,126,150,223,251,244,123,62,247,105,57,178,53,74,168,63,213,198,225,192,190,205,15,227,123,255,253,62,201,35,1,237,252,87,126,96,251,111,17,180,247,230,161,151,92,253,32,60,245,54,243,10,175,187,220,167,183,207,235,44,125,62,83,127,232,108,181,190,25,238,89,109,23,26,2,0,0,0,0,0,0,0,5,239,22,1,0,0,0,0,117,29,147,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,109,172,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,3,150,98,0,0,0,0,217,131,1,1,10,132,103,101,116,104,137,103,111,49,46,49,54,46,49,48,133,108,105,110,117,120,0,0,195,22,123,223,0,249,231,249,25,132,249,179,143,87,40,179,235,21,13,49,108,171,12,12,127,108,42,8,130,231,208,207,52,35,51,248,129,64,154,103,35,87,24,39,185,199,191,199,241,89,185,174,217,34,116,121,234,197,71,251,197,106,96,192,77,222,134,66,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
const BLOCK_198:[u8; 670] = [56,0,0,0,0,0,0,0,36,107,86,243,122,106,214,50,50,160,121,50,26,65,36,101,38,201,12,195,131,128,162,211,78,255,203,54,5,43,251,137,29,204,77,232,222,199,93,122,171,133,181,103,182,204,212,26,211,18,69,27,148,138,116,19,240,161,66,253,64,212,147,71,172,14,21,160,56,238,223,198,139,163,195,92,115,254,213,190,74,7,175,181,175,171,4,21,202,50,94,93,45,186,216,135,140,106,108,49,87,249,8,89,240,54,13,163,161,73,25,217,71,85,221,125,191,211,85,143,143,189,175,233,40,77,202,68,158,87,180,228,108,74,32,214,16,185,160,141,46,181,68,242,135,82,49,187,16,138,191,114,8,4,118,205,74,73,101,158,80,59,157,229,106,68,75,160,138,192,75,64,11,46,11,63,81,83,27,186,146,182,202,238,36,140,88,209,188,189,0,139,173,66,94,230,162,36,134,121,247,171,205,235,95,22,196,68,127,33,157,3,82,221,175,121,131,26,242,21,87,201,217,248,129,199,136,89,104,195,227,87,8,43,110,217,71,8,92,27,245,52,106,200,141,3,20,181,4,251,17,121,95,119,194,89,130,82,127,189,61,17,79,104,146,252,63,194,248,253,217,129,195,0,198,100,11,208,93,160,254,59,72,7,54,74,162,65,248,97,202,79,190,84,152,65,242,217,6,246,194,112,214,126,114,163,237,102,248,212,168,205,60,219,249,4,70,223,5,195,63,26,144,236,36,181,151,5,154,134,225,12,239,150,173,221,24,152,31,182,154,26,80,78,136,47,63,92,35,25,123,93,202,95,6,93,88,165,152,160,45,196,29,38,78,151,235,247,171,86,104,78,63,196,23,63,236,238,103,103,21,194,119,153,25,127,176,85,45,211,160,107,164,239,119,213,234,171,159,122,209,37,235,62,178,116,118,24,224,139,212,37,163,229,243,250,85,98,251,145,112,142,180,45,211,20,29,219,248,138,28,58,193,19,203,179,2,0,0,0,0,0,0,0,6,239,22,1,0,0,0,0,89,138,141,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,108,72,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,3,150,98,0,0,0,0,217,131,1,1,10,132,103,101,116,104,137,103,111,49,46,49,54,46,49,48,133,108,105,110,117,120,0,0,195,22,123,223,0,195,152,112,230,40,218,188,96,35,135,29,67,146,58,28,136,11,40,128,197,84,81,60,20,41,1,245,201,74,201,106,8,55,74,31,73,161,19,194,225,142,173,233,1,135,96,196,221,6,107,200,20,193,232,131,169,150,25,241,70,251,113,53,89,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
const BLOCK_199:[u8; 670] = [56,0,0,0,0,0,0,0,205,246,229,43,53,13,212,62,156,155,222,213,1,1,106,84,214,139,131,124,129,71,20,142,115,54,121,249,51,77,155,137,29,204,77,232,222,199,93,122,171,133,181,103,182,204,212,26,211,18,69,27,148,138,116,19,240,161,66,253,64,212,147,71,190,128,125,221,176,116,99,156,217,250,97,180,118,118,192,100,252,80,214,44,33,9,94,141,56,247,87,101,42,74,127,19,182,1,214,216,90,238,185,177,52,114,166,188,116,31,112,102,18,254,3,70,1,72,199,104,232,216,13,253,8,197,49,128,116,232,53,235,186,76,33,205,20,16,11,112,239,18,239,71,235,70,98,218,236,34,211,76,174,207,173,245,234,21,169,17,31,149,57,215,66,44,2,230,218,103,151,215,155,242,59,111,183,226,74,220,125,180,159,92,153,205,178,53,226,250,61,254,185,219,140,235,240,149,22,250,252,215,193,221,243,158,149,63,236,10,223,226,173,173,61,110,147,188,51,29,227,135,185,252,238,73,191,69,31,91,183,21,94,171,172,159,247,184,34,100,39,183,239,201,173,85,119,226,229,223,94,246,87,250,254,190,51,112,63,109,127,216,184,195,255,196,108,222,146,173,28,79,247,255,191,244,95,119,184,54,111,247,125,3,123,75,246,151,51,185,251,93,62,155,95,193,163,233,22,247,46,111,187,83,54,171,252,231,118,178,37,116,156,125,28,5,111,177,167,187,124,188,122,244,43,247,223,167,208,177,159,174,255,252,219,90,173,187,255,247,231,187,123,111,134,95,54,202,165,30,111,239,118,31,255,29,102,229,248,238,225,220,127,12,59,183,171,116,172,127,18,255,235,151,53,170,226,220,166,123,127,251,179,191,77,254,181,111,117,22,252,235,51,163,247,249,186,139,199,123,151,55,233,39,224,191,23,250,101,130,93,43,77,39,222,182,124,108,223,85,227,124,253,62,195,253,111,248,251,26,58,92,231,87,175,146,2,0,0,0,0,0,0,0,7,239,22,1,0,0,0,0,226,23,147,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,120,242,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,207,3,150,98,0,0,0,0,216,131,1,1,10,132,103,101,116,104,136,103,111,49,46,49,51,46,52,133,108,105,110,117,120,0,0,0,195,22,123,223,0,199,67,168,76,190,179,12,79,177,179,14,215,99,183,90,162,133,108,15,196,220,176,236,145,83,19,26,191,164,114,128,124,22,134,54,133,9,183,127,62,163,152,143,80,143,200,92,54,227,240,117,246,174,42,198,243,190,168,147,132,170,182,154,183,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
const BLOCK_200: [u8; 1090] = [56, 0, 0, 0, 0, 0, 0, 0, 17, 221, 139, 143, 215, 88, 127, 210, 141, 1, 65, 71, 109, 44, 225, 115, 43, 236, 227, 71, 201, 59, 181, 79, 31, 236, 238, 185, 10, 245, 242, 157, 29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66, 253, 64, 212, 147, 71, 206, 47, 215, 84, 78, 11, 44, 201, 70, 146, 212, 167, 4, 222, 190, 247, 188, 182, 19, 40, 43, 221, 65, 48, 10, 18, 169, 152, 157, 157, 212, 59, 107, 20, 93, 185, 223, 75, 95, 132, 51, 248, 243, 197, 240, 155, 67, 175, 131, 81, 167, 151, 170, 118, 41, 50, 32, 181, 6, 22, 76, 212, 45, 137, 73, 157, 86, 80, 127, 84, 156, 103, 168, 137, 228, 4, 214, 40, 243, 17, 43, 106, 85, 185, 34, 111, 55, 172, 153, 75, 15, 240, 245, 170, 12, 236, 108, 52, 205, 187, 206, 214, 13, 137, 216, 189, 236, 145, 133, 55, 39, 60, 175, 185, 77, 234, 28, 224, 231, 108, 202, 167, 59, 16, 203, 31, 194, 197, 176, 7, 53, 239, 177, 140, 68, 123, 239, 100, 197, 249, 251, 150, 182, 224, 124, 110, 151, 128, 68, 205, 51, 95, 182, 5, 49, 201, 247, 83, 114, 53, 1, 89, 21, 210, 110, 251, 199, 153, 222, 211, 174, 170, 81, 103, 14, 192, 47, 245, 110, 169, 157, 210, 64, 116, 141, 86, 209, 62, 119, 43, 65, 216, 171, 85, 34, 60, 111, 86, 42, 97, 247, 246, 120, 95, 255, 53, 83, 54, 138, 156, 18, 78, 89, 53, 151, 123, 43, 55, 127, 64, 205, 175, 162, 217, 55, 232, 252, 51, 217, 67, 182, 207, 168, 174, 143, 239, 204, 99, 151, 189, 21, 202, 197, 243, 54, 50, 155, 189, 87, 45, 123, 135, 110, 195, 86, 229, 63, 57, 192, 214, 40, 172, 196, 111, 20, 39, 209, 222, 241, 155, 173, 77, 202, 128, 63, 176, 238, 11, 225, 173, 136, 222, 119, 13, 244, 145, 123, 109, 90, 111, 77, 30, 211, 237, 85, 218, 38, 206, 85, 233, 109, 103, 235, 127, 121, 230, 35, 204, 127, 215, 135, 15, 140, 9, 222, 115, 144, 159, 50, 193, 117, 227, 244, 50, 243, 23, 160, 102, 58, 219, 232, 217, 238, 162, 223, 158, 48, 149, 241, 42, 189, 179, 252, 221, 81, 85, 193, 67, 3, 44, 220, 94, 236, 190, 217, 18, 96, 185, 87, 159, 91, 222, 63, 78, 240, 202, 108, 33, 24, 245, 125, 46, 2, 0, 0, 0, 0, 0, 0, 0, 8, 239, 22, 1, 0, 0, 0, 0, 248, 170, 152, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164, 175, 151, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 3, 150, 98, 0, 0, 0, 0, 216, 131, 1, 1, 10, 132, 103, 101, 116, 104, 136, 103, 111, 49, 46, 49, 51, 46, 52, 133, 108, 105, 110, 117, 120, 0, 0, 0, 195, 22, 123, 223, 1, 36, 101, 23, 108, 70, 26, 251, 49, 110, 188, 119, 60, 97, 250, 238, 133, 166, 81, 93, 170, 41, 94, 38, 73, 92, 239, 111, 105, 223, 166, 153, 17, 217, 216, 228, 243, 187, 173, 184, 155, 41, 169, 124, 110, 255, 184, 164, 17, 218, 188, 106, 222, 239, 170, 132, 245, 6, 124, 139, 190, 45, 76, 64, 123, 190, 73, 67, 142, 216, 89, 254, 150, 91, 20, 13, 207, 26, 171, 113, 169, 63, 52, 155, 186, 254, 193, 85, 24, 25, 184, 190, 30, 254, 162, 252, 70, 202, 116, 154, 161, 104, 91, 29, 237, 128, 19, 120, 93, 102, 35, 204, 24, 210, 20, 50, 11, 107, 182, 71, 89, 112, 246, 87, 22, 78, 91, 117, 104, 155, 100, 183, 253, 31, 162, 117, 243, 52, 242, 142, 24, 114, 182, 28, 96, 20, 52, 45, 145, 68, 112, 236, 122, 194, 151, 91, 227, 69, 121, 108, 43, 122, 226, 245, 185, 227, 134, 205, 27, 80, 164, 85, 6, 150, 217, 87, 203, 73, 0, 240, 58, 139, 108, 143, 217, 61, 111, 76, 234, 66, 187, 179, 69, 219, 198, 240, 223, 219, 91, 236, 115, 159, 140, 205, 175, 204, 57, 243, 199, 214, 235, 246, 55, 201, 21, 22, 115, 203, 195, 107, 136, 166, 247, 155, 96, 53, 159, 20, 29, 249, 10, 12, 116, 81, 37, 177, 49, 202, 175, 253, 18, 170, 207, 106, 129, 25, 247, 225, 22, 35, 181, 164, 61, 166, 56, 233, 31, 102, 154, 19, 15, 172, 14, 21, 160, 56, 238, 223, 198, 139, 163, 195, 92, 115, 254, 213, 190, 74, 7, 175, 181, 190, 128, 125, 221, 176, 116, 99, 156, 217, 250, 97, 180, 118, 118, 192, 100, 252, 80, 214, 44, 206, 47, 215, 84, 78, 11, 44, 201, 70, 146, 212, 167, 4, 222, 190, 247, 188, 182, 19, 40, 226, 211, 167, 57, 239, 252, 211, 169, 147, 135, 208, 21, 226, 96, 238, 250, 199, 46, 190, 161, 233, 174, 50, 97, 164, 117, 162, 123, 177, 2, 143, 20, 11, 194, 167, 200, 67, 49, 138, 253, 234, 10, 110, 60, 81, 27, 189, 16, 244, 81, 158, 206, 55, 220, 36, 136, 126, 17, 181, 93, 238, 34, 99, 121, 219, 131, 207, 252, 104, 20, 149, 115, 12, 17, 253, 222, 121, 186, 76, 12, 239, 2, 116, 227, 24, 16, 201, 223, 2, 249, 143, 175, 222, 15, 132, 31, 78, 102, 161, 205, 228, 74, 234, 220, 4, 212, 237, 161, 132, 81, 230, 189, 214, 11, 79, 227, 201, 160, 96, 71, 113, 199, 58, 194, 14, 171, 44, 114, 47, 110, 235, 147, 117, 188, 71, 7, 29, 158, 183, 193, 163, 245, 6, 235, 60, 249, 117, 44, 164, 163, 147, 41, 245, 225, 212, 161, 3, 82, 201, 141, 95, 234, 75, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
const BLOCK_201: [u8; 670] = [56,0,0,0,0,0,0,0,91,181,236,208,187,16,29,38,54,51,196,10,117,236,109,15,52,163,225,204,2,238,193,105,179,218,154,175,233,152,211,29,29,204,77,232,222,199,93,122,171,133,181,103,182,204,212,26,211,18,69,27,148,138,116,19,240,161,66,253,64,212,147,71,226,211,167,57,239,252,211,169,147,135,208,21,226,96,238,250,199,46,190,161,186,179,132,129,175,159,48,12,72,151,188,32,150,142,190,19,202,182,228,93,96,2,180,109,52,145,167,78,114,252,129,212,218,219,124,106,22,182,10,90,150,26,245,86,229,112,216,22,109,112,38,94,33,204,67,87,136,70,49,31,138,10,195,228,17,64,2,172,90,86,131,74,72,219,82,18,62,230,26,14,150,67,253,65,64,111,31,177,194,185,143,54,56,105,32,23,164,164,234,167,132,198,80,209,171,173,0,250,167,55,6,204,187,227,20,234,212,69,135,73,123,115,214,56,46,173,83,24,44,175,41,219,168,19,114,25,67,191,112,124,134,100,21,80,15,7,68,149,10,44,88,184,229,88,52,90,53,116,52,170,137,238,38,96,9,109,87,180,223,235,123,92,194,100,58,191,229,89,250,168,182,196,40,126,194,212,34,197,136,108,128,232,137,64,127,246,95,22,177,177,87,195,111,159,51,215,217,228,137,241,74,199,160,57,172,176,45,38,16,190,208,130,101,11,31,236,174,9,31,113,116,220,70,137,134,16,174,119,14,164,49,164,7,21,148,241,133,12,225,57,97,100,8,226,91,125,202,242,0,68,3,9,119,108,46,115,105,52,99,95,137,174,124,198,37,177,248,211,45,182,82,142,114,32,66,238,116,254,125,51,124,11,147,150,234,34,166,199,245,167,38,54,82,202,181,66,124,43,129,204,37,208,250,236,163,230,56,157,227,182,251,241,191,67,14,149,117,1,35,194,179,153,196,104,24,68,79,142,132,88,66,200,21,220,170,194,24,182,113,29,159,123,2,0,0,0,0,0,0,0,9,239,22,1,0,0,0,0,161,67,158,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,216,88,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,3,150,98,0,0,0,0,216,131,1,1,10,132,103,101,116,104,136,103,111,49,46,49,51,46,52,133,108,105,110,117,120,0,0,0,195,22,123,223,0,220,59,188,59,203,207,213,32,61,251,95,138,141,6,216,120,102,44,233,125,217,1,180,130,41,145,26,31,74,151,65,165,71,193,49,62,177,113,126,105,233,92,56,97,172,175,191,159,172,87,212,191,87,107,132,69,189,11,53,197,76,66,104,234,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
const BLOCK_300: [u8; 670] = [56, 0, 0, 0, 0, 0, 0, 0, 236, 128, 148, 95, 189, 163, 167, 115, 252, 136, 233, 163, 36, 73, 118, 136, 134, 26, 19, 26, 96, 91, 178, 227, 98, 84, 247, 241, 22, 148, 126, 239, 29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66, 253, 64, 212, 147, 71, 159, 140, 205, 175, 204, 57, 243, 199, 214, 235, 246, 55, 201, 21, 22, 115, 203, 195, 107, 136, 152, 244, 245, 140, 223, 185, 53, 95, 86, 114, 96, 86, 192, 188, 123, 250, 69, 15, 183, 209, 159, 23, 152, 101, 176, 84, 154, 24, 174, 37, 44, 173, 239, 239, 130, 178, 243, 42, 169, 123, 64, 22, 183, 195, 76, 97, 215, 160, 0, 176, 208, 125, 58, 136, 192, 132, 83, 159, 5, 136, 19, 227, 169, 169, 191, 219, 97, 24, 112, 131, 21, 200, 38, 236, 229, 225, 152, 41, 139, 205, 241, 231, 185, 241, 195, 72, 21, 145, 130, 192, 144, 8, 204, 32, 2, 117, 188, 38, 147, 0, 8, 10, 81, 112, 198, 4, 0, 78, 197, 25, 13, 6, 170, 164, 70, 110, 212, 136, 15, 208, 35, 19, 69, 194, 62, 137, 95, 44, 0, 85, 10, 115, 44, 245, 20, 10, 155, 37, 9, 189, 130, 1, 17, 202, 27, 0, 62, 50, 86, 132, 137, 87, 68, 100, 98, 18, 86, 108, 114, 137, 129, 65, 165, 118, 37, 75, 70, 52, 87, 33, 219, 30, 69, 96, 107, 43, 103, 91, 86, 203, 137, 198, 76, 234, 236, 173, 102, 93, 201, 159, 204, 233, 23, 220, 158, 169, 111, 18, 135, 103, 183, 86, 62, 221, 16, 136, 57, 132, 110, 131, 65, 66, 155, 142, 119, 21, 124, 114, 85, 147, 99, 130, 239, 231, 191, 65, 132, 13, 182, 175, 104, 70, 199, 200, 4, 16, 200, 186, 143, 160, 96, 54, 204, 133, 61, 243, 101, 8, 169, 5, 29, 72, 97, 167, 187, 55, 14, 181, 176, 96, 6, 171, 54, 196, 41, 17, 137, 222, 106, 30, 150, 218, 32, 178, 7, 120, 70, 155, 69, 220, 70, 40, 33, 91, 33, 227, 246, 45, 48, 208, 108, 251, 3, 25, 206, 43, 84, 200, 53, 217, 25, 114, 83, 242, 113, 28, 32, 51, 33, 27, 60, 53, 106, 109, 37, 11, 145, 115, 245, 120, 36, 91, 126, 27, 1, 64, 116, 44, 51, 125, 183, 154, 70, 100, 23, 209, 84, 9, 124, 78, 231, 137, 13, 76, 247, 10, 74, 63, 185, 61, 15, 111, 2, 0, 0, 0, 0, 0, 0, 0, 108, 239, 22, 1, 0, 0, 0, 0, 105, 152, 167, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 106, 65, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 4, 150, 98, 0, 0, 0, 0, 217, 131, 1, 1, 10, 132, 103, 101, 116, 104, 137, 103, 111, 49, 46, 49, 54, 46, 49, 53, 133, 108, 105, 110, 117, 120, 0, 0, 195, 22, 123, 223, 0, 41, 249, 205, 23, 208, 8, 51, 177, 245, 163, 144, 236, 207, 192, 147, 16, 62, 203, 216, 222, 246, 176, 28, 99, 28, 41, 218, 40, 148, 54, 107, 73, 31, 159, 95, 22, 62, 230, 95, 30, 76, 73, 202, 46, 51, 103, 136, 250, 175, 162, 194, 221, 219, 55, 246, 219, 126, 61, 97, 211, 7, 155, 120, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
const BLOCK_400: [u8; 1090] = [56, 0, 0, 0, 0, 0, 0, 0, 243, 247, 170, 68, 94, 168, 240, 122, 56, 249, 106, 176, 222, 159, 140, 206, 75, 214, 28, 179, 0, 127, 181, 255, 43, 170, 245, 85, 13, 65, 195, 143, 29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66, 253, 64, 212, 147, 71, 104, 91, 29, 237, 128, 19, 120, 93, 102, 35, 204, 24, 210, 20, 50, 11, 107, 182, 71, 89, 141, 253, 180, 148, 144, 234, 70, 80, 154, 228, 41, 94, 91, 251, 174, 37, 162, 39, 239, 158, 208, 78, 72, 85, 74, 251, 228, 249, 115, 210, 53, 59, 217, 130, 39, 173, 222, 247, 132, 187, 135, 1, 22, 144, 40, 120, 128, 112, 185, 219, 113, 177, 64, 189, 188, 118, 245, 188, 51, 145, 105, 225, 137, 68, 95, 243, 132, 6, 46, 245, 218, 123, 33, 255, 248, 65, 145, 147, 32, 117, 221, 214, 158, 29, 90, 183, 176, 84, 27, 147, 118, 77, 20, 71, 55, 204, 38, 107, 162, 139, 12, 166, 27, 16, 178, 91, 4, 65, 236, 4, 142, 105, 78, 32, 135, 60, 148, 92, 33, 72, 127, 131, 198, 128, 130, 200, 137, 88, 104, 145, 54, 40, 128, 112, 49, 95, 238, 88, 182, 100, 129, 88, 71, 237, 15, 97, 168, 36, 206, 78, 72, 50, 24, 251, 103, 10, 24, 37, 173, 57, 1, 246, 54, 203, 249, 139, 102, 181, 223, 162, 29, 94, 132, 6, 239, 168, 117, 87, 41, 90, 170, 198, 28, 100, 178, 37, 198, 119, 220, 5, 196, 200, 86, 218, 142, 124, 107, 30, 21, 164, 191, 119, 34, 151, 20, 68, 216, 86, 152, 143, 34, 244, 226, 187, 132, 42, 24, 87, 197, 82, 135, 47, 132, 51, 72, 16, 236, 4, 49, 157, 17, 132, 77, 179, 156, 176, 217, 216, 53, 222, 98, 166, 12, 157, 148, 129, 249, 152, 193, 101, 125, 194, 136, 141, 28, 51, 131, 140, 75, 200, 243, 92, 215, 152, 150, 33, 205, 129, 38, 156, 47, 139, 107, 20, 69, 155, 200, 129, 209, 84, 26, 52, 162, 152, 142, 113, 68, 96, 65, 27, 15, 47, 52, 155, 166, 15, 36, 148, 178, 177, 72, 138, 23, 226, 165, 214, 16, 18, 69, 154, 77, 217, 38, 52, 59, 127, 84, 34, 240, 34, 0, 242, 124, 108, 198, 5, 113, 100, 67, 48, 117, 40, 152, 241, 128, 10, 197, 74, 54, 202, 198, 204, 101, 90, 132, 57, 234, 13, 33, 84, 3, 45, 2, 0, 0, 0, 0, 0, 0, 0, 208, 239, 22, 1, 0, 0, 0, 0, 66, 4, 181, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 76, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 6, 150, 98, 0, 0, 0, 0, 216, 131, 1, 1, 10, 132, 103, 101, 116, 104, 136, 103, 111, 49, 46, 49, 51, 46, 52, 133, 108, 105, 110, 117, 120, 0, 0, 0, 195, 22, 123, 223, 1, 36, 101, 23, 108, 70, 26, 251, 49, 110, 188, 119, 60, 97, 250, 238, 133, 166, 81, 93, 170, 41, 94, 38, 73, 92, 239, 111, 105, 223, 166, 153, 17, 217, 216, 228, 243, 187, 173, 184, 155, 41, 169, 124, 110, 255, 184, 164, 17, 218, 188, 106, 222, 239, 170, 132, 245, 6, 124, 139, 190, 45, 76, 64, 123, 190, 73, 67, 142, 216, 89, 254, 150, 91, 20, 13, 207, 26, 171, 113, 169, 63, 52, 155, 186, 254, 193, 85, 24, 25, 184, 190, 30, 254, 162, 252, 70, 202, 116, 154, 161, 104, 91, 29, 237, 128, 19, 120, 93, 102, 35, 204, 24, 210, 20, 50, 11, 107, 182, 71, 89, 112, 246, 87, 22, 78, 91, 117, 104, 155, 100, 183, 253, 31, 162, 117, 243, 52, 242, 142, 24, 114, 182, 28, 96, 20, 52, 45, 145, 68, 112, 236, 122, 194, 151, 91, 227, 69, 121, 108, 43, 122, 226, 245, 185, 227, 134, 205, 27, 80, 164, 85, 6, 150, 217, 87, 203, 73, 0, 240, 58, 139, 108, 143, 217, 61, 111, 76, 234, 66, 187, 179, 69, 219, 198, 240, 223, 219, 91, 236, 115, 159, 140, 205, 175, 204, 57, 243, 199, 214, 235, 246, 55, 201, 21, 22, 115, 203, 195, 107, 136, 166, 247, 155, 96, 53, 159, 20, 29, 249, 10, 12, 116, 81, 37, 177, 49, 202, 175, 253, 18, 170, 207, 106, 129, 25, 247, 225, 22, 35, 181, 164, 61, 166, 56, 233, 31, 102, 154, 19, 15, 172, 14, 21, 160, 56, 238, 223, 198, 139, 163, 195, 92, 115, 254, 213, 190, 74, 7, 175, 181, 190, 128, 125, 221, 176, 116, 99, 156, 217, 250, 97, 180, 118, 118, 192, 100, 252, 80, 214, 44, 206, 47, 215, 84, 78, 11, 44, 201, 70, 146, 212, 167, 4, 222, 190, 247, 188, 182, 19, 40, 226, 211, 167, 57, 239, 252, 211, 169, 147, 135, 208, 21, 226, 96, 238, 250, 199, 46, 190, 161, 233, 174, 50, 97, 164, 117, 162, 123, 177, 2, 143, 20, 11, 194, 167, 200, 67, 49, 138, 253, 234, 10, 110, 60, 81, 27, 189, 16, 244, 81, 158, 206, 55, 220, 36, 136, 126, 17, 181, 93, 238, 34, 99, 121, 219, 131, 207, 252, 104, 20, 149, 115, 12, 17, 253, 222, 121, 186, 76, 12, 239, 2, 116, 227, 24, 16, 201, 223, 2, 249, 143, 175, 222, 15, 132, 31, 78, 102, 161, 205, 225, 206, 184, 239, 238, 202, 255, 50, 251, 159, 138, 97, 5, 58, 86, 182, 9, 161, 87, 207, 150, 92, 169, 210, 124, 241, 138, 38, 231, 125, 95, 161, 53, 36, 241, 62, 46, 53, 4, 34, 63, 237, 21, 254, 35, 7, 184, 249, 167, 176, 60, 144, 109, 135, 11, 164, 81, 91, 237, 98, 17, 37, 81, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
const BLOCK_401: [u8; 670] = [56, 0, 0, 0, 0, 0, 0, 0, 157, 55, 33, 33, 7, 157, 246, 28, 81, 79, 213, 77, 3, 174, 185, 11, 47, 217, 59, 3, 37, 100, 176, 127, 252, 221, 248, 96, 159, 76, 14, 187, 29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66, 253, 64, 212, 147, 71, 112, 246, 87, 22, 78, 91, 117, 104, 155, 100, 183, 253, 31, 162, 117, 243, 52, 242, 142, 24, 37, 209, 13, 243, 0, 150, 68, 226, 184, 199, 193, 100, 250, 135, 62, 209, 221, 106, 215, 5, 124, 148, 40, 114, 161, 127, 177, 201, 45, 94, 221, 213, 156, 54, 2, 248, 153, 215, 179, 203, 189, 125, 67, 197, 96, 4, 125, 62, 138, 120, 19, 175, 172, 197, 236, 223, 77, 21, 236, 68, 150, 70, 92, 97, 14, 42, 56, 108, 175, 38, 49, 227, 152, 16, 194, 6, 72, 201, 200, 88, 158, 146, 38, 255, 108, 243, 18, 209, 37, 254, 249, 89, 246, 181, 207, 85, 48, 126, 223, 249, 106, 230, 217, 28, 246, 88, 165, 14, 255, 212, 247, 255, 247, 198, 206, 188, 231, 167, 111, 62, 219, 127, 254, 159, 126, 253, 87, 115, 85, 245, 84, 235, 245, 23, 247, 254, 199, 190, 115, 237, 199, 83, 157, 239, 123, 121, 151, 249, 175, 231, 253, 19, 113, 205, 170, 63, 61, 119, 173, 65, 175, 165, 36, 249, 249, 103, 118, 183, 229, 187, 230, 191, 223, 230, 235, 187, 255, 30, 159, 213, 247, 216, 235, 10, 250, 190, 142, 104, 217, 111, 47, 109, 239, 31, 246, 254, 175, 246, 25, 95, 118, 251, 83, 223, 14, 63, 191, 247, 250, 153, 187, 251, 140, 187, 191, 237, 51, 110, 81, 115, 207, 157, 247, 189, 243, 236, 225, 95, 254, 187, 254, 230, 12, 248, 126, 164, 123, 247, 254, 188, 222, 127, 230, 165, 248, 251, 247, 111, 185, 189, 251, 253, 138, 207, 91, 241, 239, 175, 148, 46, 189, 155, 251, 228, 39, 250, 73, 157, 118, 143, 253, 231, 170, 238, 87, 195, 237, 239, 35, 100, 239, 230, 123, 223, 111, 250, 243, 239, 233, 245, 119, 151, 63, 177, 152, 211, 255, 168, 80, 242, 89, 122, 247, 246, 127, 207, 235, 107, 210, 113, 118, 189, 190, 238, 233, 91, 95, 247, 162, 127, 95, 241, 183, 255, 126, 250, 150, 126, 117, 124, 158, 223, 252, 120, 119, 229, 217, 237, 239, 95, 221, 197, 223, 110, 124, 63, 222, 189, 120, 74, 142, 29, 2, 0, 0, 0, 0, 0, 0, 0, 209, 239, 22, 1, 0, 0, 0, 0, 69, 185, 186, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 42, 83, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 6, 150, 98, 0, 0, 0, 0, 216, 131, 1, 1, 10, 132, 103, 101, 116, 104, 136, 103, 111, 49, 46, 49, 51, 46, 52, 133, 108, 105, 110, 117, 120, 0, 0, 0, 195, 22, 123, 223, 0, 176, 79, 163, 192, 193, 149, 218, 254, 196, 86, 217, 223, 186, 240, 8, 64, 180, 10, 142, 234, 169, 13, 227, 6, 35, 249, 232, 136, 253, 101, 75, 119, 94, 195, 203, 200, 52, 34, 95, 171, 187, 62, 90, 12, 131, 242, 13, 111, 235, 86, 11, 1, 10, 80, 33, 110, 152, 53, 107, 20, 50, 229, 40, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
const INVALID_SIG: [u8; 1090] = [56, 0, 0, 0, 0, 0, 0, 0, 243, 247, 170, 68, 94, 168, 240, 122, 56, 249, 106, 176, 222, 159, 140, 206, 75, 214, 28, 179, 0, 127, 181, 255, 43, 170, 245, 85, 13, 65, 195, 143, 29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66, 253, 64, 212, 147, 71, 104, 91, 29, 237, 128, 19, 120, 93, 102, 35, 204, 24, 210, 20, 50, 11, 107, 182, 71, 89, 141, 253, 180, 148, 144, 234, 70, 80, 154, 228, 41, 94, 91, 251, 174, 37, 162, 39, 239, 158, 208, 78, 72, 85, 74, 251, 228, 249, 115, 210, 53, 59, 217, 130, 39, 173, 222, 247, 132, 187, 135, 1, 22, 144, 40, 120, 128, 112, 185, 219, 113, 177, 64, 189, 188, 118, 245, 188, 51, 145, 105, 225, 137, 68, 95, 243, 132, 6, 46, 245, 218, 123, 33, 255, 248, 65, 145, 147, 32, 117, 221, 214, 158, 29, 90, 183, 176, 84, 27, 147, 118, 77, 20, 71, 55, 204, 38, 107, 162, 139, 12, 166, 27, 16, 178, 91, 4, 65, 236, 4, 142, 105, 78, 32, 135, 60, 148, 92, 33, 72, 127, 131, 198, 128, 130, 200, 137, 88, 104, 145, 54, 40, 128, 112, 49, 95, 238, 88, 182, 100, 129, 88, 71, 237, 15, 97, 168, 36, 206, 78, 72, 50, 24, 251, 103, 10, 24, 37, 173, 57, 1, 246, 54, 203, 249, 139, 102, 181, 223, 162, 29, 94, 132, 6, 239, 168, 117, 87, 41, 90, 170, 198, 28, 100, 178, 37, 198, 119, 220, 5, 196, 200, 86, 218, 142, 124, 107, 30, 21, 164, 191, 119, 34, 151, 20, 68, 216, 86, 152, 143, 34, 244, 226, 187, 132, 42, 24, 87, 197, 82, 135, 47, 132, 51, 72, 16, 236, 4, 49, 157, 17, 132, 77, 179, 156, 176, 217, 216, 53, 222, 98, 166, 12, 157, 148, 129, 249, 152, 193, 101, 125, 194, 136, 141, 28, 51, 131, 140, 75, 200, 243, 92, 215, 152, 150, 33, 205, 129, 38, 156, 47, 139, 107, 20, 69, 155, 200, 129, 209, 84, 26, 52, 162, 152, 142, 113, 68, 96, 65, 27, 15, 47, 52, 155, 166, 15, 36, 148, 178, 177, 72, 138, 23, 226, 165, 214, 16, 18, 69, 154, 77, 217, 38, 52, 59, 127, 84, 34, 240, 34, 0, 242, 124, 108, 198, 5, 113, 100, 67, 48, 117, 40, 152, 241, 128, 10, 197, 74, 54, 202, 198, 204, 101, 90, 132, 57, 234, 13, 33, 84, 3, 45, 2, 0, 0, 0, 0, 0, 0, 0, 208, 239, 22, 1, 0, 0, 0, 0, 66, 4, 181, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 76, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 6, 150, 98, 0, 0, 0, 0, 216, 131, 1, 1, 10, 132, 103, 101, 116, 104, 136, 103, 111, 49, 46, 49, 51, 46, 52, 133, 108, 105, 110, 117, 120, 0, 0, 0, 195, 22, 123, 223, 1, 36, 101, 23, 108, 70, 26, 251, 49, 110, 188, 119, 60, 97, 250, 238, 133, 166, 81, 93, 170, 41, 94, 38, 73, 92, 239, 111, 105, 223, 166, 153, 17, 217, 216, 228, 243, 187, 173, 184, 155, 41, 169, 124, 110, 255, 184, 164, 17, 218, 188, 106, 222, 239, 170, 132, 245, 6, 124, 139, 190, 45, 76, 64, 123, 190, 73, 67, 142, 216, 89, 254, 150, 91, 20, 13, 207, 26, 171, 113, 169, 63, 52, 155, 186, 254, 193, 85, 24, 25, 184, 190, 30, 254, 162, 252, 70, 202, 116, 154, 161, 104, 91, 29, 237, 128, 19, 120, 93, 102, 35, 204, 24, 210, 20, 50, 11, 107, 182, 71, 89, 112, 246, 87, 22, 78, 91, 117, 104, 155, 100, 183, 253, 31, 162, 117, 243, 52, 242, 142, 24, 114, 182, 28, 96, 20, 52, 45, 145, 68, 112, 236, 122, 194, 151, 91, 227, 69, 121, 108, 43, 122, 226, 245, 185, 227, 134, 205, 27, 80, 164, 85, 6, 150, 217, 87, 203, 73, 0, 240, 58, 139, 108, 143, 217, 61, 111, 76, 234, 66, 187, 179, 69, 219, 198, 240, 223, 219, 91, 236, 115, 159, 140, 205, 175, 204, 57, 243, 199, 214, 235, 246, 55, 201, 21, 22, 115, 203, 195, 107, 136, 166, 247, 155, 96, 53, 159, 20, 29, 249, 10, 12, 116, 81, 37, 177, 49, 202, 175, 253, 18, 170, 207, 106, 129, 25, 247, 225, 22, 35, 181, 164, 61, 166, 56, 233, 31, 102, 154, 19, 15, 172, 14, 21, 160, 56, 238, 223, 198, 139, 163, 195, 92, 115, 254, 213, 190, 74, 7, 175, 181, 190, 128, 125, 221, 176, 116, 99, 156, 217, 250, 97, 180, 118, 118, 192, 100, 252, 80, 214, 44, 206, 47, 215, 84, 78, 11, 44, 201, 70, 146, 212, 167, 4, 222, 190, 247, 188, 182, 19, 40, 226, 211, 167, 57, 239, 252, 211, 169, 147, 135, 208, 21, 226, 96, 238, 250, 199, 46, 190, 161, 233, 174, 50, 97, 164, 117, 162, 123, 177, 2, 143, 20, 11, 194, 167, 200, 67, 49, 138, 253, 234, 10, 110, 60, 81, 27, 189, 16, 244, 81, 158, 206, 55, 220, 36, 136, 126, 17, 181, 93, 238, 34, 99, 121, 219, 131, 207, 252, 104, 20, 149, 115, 12, 17, 253, 222, 121, 186, 76, 12, 239, 2, 116, 227, 24, 16, 201, 223, 2, 249, 143, 175, 222, 15, 132, 31, 78, 102, 161, 205, 225, 206, 184, 239, 238, 202, 255, 50, 251, 159, 138, 97, 5, 58, 86, 182, 9, 161, 87, 207, 150, 92, 169, 210, 124, 241, 138, 38, 231, 125, 95, 161, 53, 36, 241, 62, 46, 53, 4, 34, 63, 237, 21, 254, 35, 7, 184, 249, 167, 176, 60, 144, 109, 135, 11, 164, 81, 91, 237, 98, 17, 37, 81, 231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
const CORRUPT_HEADER: [u8; 1089] = [0, 0, 0, 0, 0, 0, 0, 243, 247, 170, 68, 94, 168, 240, 122, 56, 249, 106, 176, 222, 159, 140, 206, 75, 214, 28, 179, 0, 127, 181, 255, 43, 170, 245, 85, 13, 65, 195, 143, 29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66, 253, 64, 212, 147, 71, 104, 91, 29, 237, 128, 19, 120, 93, 102, 35, 204, 24, 210, 20, 50, 11, 107, 182, 71, 89, 141, 253, 180, 148, 144, 234, 70, 80, 154, 228, 41, 94, 91, 251, 174, 37, 162, 39, 239, 158, 208, 78, 72, 85, 74, 251, 228, 249, 115, 210, 53, 59, 217, 130, 39, 173, 222, 247, 132, 187, 135, 1, 22, 144, 40, 120, 128, 112, 185, 219, 113, 177, 64, 189, 188, 118, 245, 188, 51, 145, 105, 225, 137, 68, 95, 243, 132, 6, 46, 245, 218, 123, 33, 255, 248, 65, 145, 147, 32, 117, 221, 214, 158, 29, 90, 183, 176, 84, 27, 147, 118, 77, 20, 71, 55, 204, 38, 107, 162, 139, 12, 166, 27, 16, 178, 91, 4, 65, 236, 4, 142, 105, 78, 32, 135, 60, 148, 92, 33, 72, 127, 131, 198, 128, 130, 200, 137, 88, 104, 145, 54, 40, 128, 112, 49, 95, 238, 88, 182, 100, 129, 88, 71, 237, 15, 97, 168, 36, 206, 78, 72, 50, 24, 251, 103, 10, 24, 37, 173, 57, 1, 246, 54, 203, 249, 139, 102, 181, 223, 162, 29, 94, 132, 6, 239, 168, 117, 87, 41, 90, 170, 198, 28, 100, 178, 37, 198, 119, 220, 5, 196, 200, 86, 218, 142, 124, 107, 30, 21, 164, 191, 119, 34, 151, 20, 68, 216, 86, 152, 143, 34, 244, 226, 187, 132, 42, 24, 87, 197, 82, 135, 47, 132, 51, 72, 16, 236, 4, 49, 157, 17, 132, 77, 179, 156, 176, 217, 216, 53, 222, 98, 166, 12, 157, 148, 129, 249, 152, 193, 101, 125, 194, 136, 141, 28, 51, 131, 140, 75, 200, 243, 92, 215, 152, 150, 33, 205, 129, 38, 156, 47, 139, 107, 20, 69, 155, 200, 129, 209, 84, 26, 52, 162, 152, 142, 113, 68, 96, 65, 27, 15, 47, 52, 155, 166, 15, 36, 148, 178, 177, 72, 138, 23, 226, 165, 214, 16, 18, 69, 154, 77, 217, 38, 52, 59, 127, 84, 34, 240, 34, 0, 242, 124, 108, 198, 5, 113, 100, 67, 48, 117, 40, 152, 241, 128, 10, 197, 74, 54, 202, 198, 204, 101, 90, 132, 57, 234, 13, 33, 84, 3, 45, 2, 0, 0, 0, 0, 0, 0, 0, 208, 239, 22, 1, 0, 0, 0, 0, 66, 4, 181, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 76, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 6, 150, 98, 0, 0, 0, 0, 216, 131, 1, 1, 10, 132, 103, 101, 116, 104, 136, 103, 111, 49, 46, 49, 51, 46, 52, 133, 108, 105, 110, 117, 120, 0, 0, 0, 195, 22, 123, 223, 1, 36, 101, 23, 108, 70, 26, 251, 49, 110, 188, 119, 60, 97, 250, 238, 133, 166, 81, 93, 170, 41, 94, 38, 73, 92, 239, 111, 105, 223, 166, 153, 17, 217, 216, 228, 243, 187, 173, 184, 155, 41, 169, 124, 110, 255, 184, 164, 17, 218, 188, 106, 222, 239, 170, 132, 245, 6, 124, 139, 190, 45, 76, 64, 123, 190, 73, 67, 142, 216, 89, 254, 150, 91, 20, 13, 207, 26, 171, 113, 169, 63, 52, 155, 186, 254, 193, 85, 24, 25, 184, 190, 30, 254, 162, 252, 70, 202, 116, 154, 161, 104, 91, 29, 237, 128, 19, 120, 93, 102, 35, 204, 24, 210, 20, 50, 11, 107, 182, 71, 89, 112, 246, 87, 22, 78, 91, 117, 104, 155, 100, 183, 253, 31, 162, 117, 243, 52, 242, 142, 24, 114, 182, 28, 96, 20, 52, 45, 145, 68, 112, 236, 122, 194, 151, 91, 227, 69, 121, 108, 43, 122, 226, 245, 185, 227, 134, 205, 27, 80, 164, 85, 6, 150, 217, 87, 203, 73, 0, 240, 58, 139, 108, 143, 217, 61, 111, 76, 234, 66, 187, 179, 69, 219, 198, 240, 223, 219, 91, 236, 115, 159, 140, 205, 175, 204, 57, 243, 199, 214, 235, 246, 55, 201, 21, 22, 115, 203, 195, 107, 136, 166, 247, 155, 96, 53, 159, 20, 29, 249, 10, 12, 116, 81, 37, 177, 49, 202, 175, 253, 18, 170, 207, 106, 129, 25, 247, 225, 22, 35, 181, 164, 61, 166, 56, 233, 31, 102, 154, 19, 15, 172, 14, 21, 160, 56, 238, 223, 198, 139, 163, 195, 92, 115, 254, 213, 190, 74, 7, 175, 181, 190, 128, 125, 221, 176, 116, 99, 156, 217, 250, 97, 180, 118, 118, 192, 100, 252, 80, 214, 44, 206, 47, 215, 84, 78, 11, 44, 201, 70, 146, 212, 167, 4, 222, 190, 247, 188, 182, 19, 40, 226, 211, 167, 57, 239, 252, 211, 169, 147, 135, 208, 21, 226, 96, 238, 250, 199, 46, 190, 161, 233, 174, 50, 97, 164, 117, 162, 123, 177, 2, 143, 20, 11, 194, 167, 200, 67, 49, 138, 253, 234, 10, 110, 60, 81, 27, 189, 16, 244, 81, 158, 206, 55, 220, 36, 136, 126, 17, 181, 93, 238, 34, 99, 121, 219, 131, 207, 252, 104, 20, 149, 115, 12, 17, 253, 222, 121, 186, 76, 12, 239, 2, 116, 227, 24, 16, 201, 223, 2, 249, 143, 175, 222, 15, 132, 31, 78, 102, 161, 205, 225, 206, 184, 239, 238, 202, 255, 50, 251, 159, 138, 97, 5, 58, 86, 182, 9, 161, 87, 207, 150, 92, 169, 210, 124, 241, 138, 38, 231, 125, 95, 161, 53, 36, 241, 62, 46, 53, 4, 34, 63, 237, 21, 254, 35, 7, 184, 249, 167, 176, 60, 144, 109, 135, 11, 164, 81, 91, 237, 98, 17, 37, 81, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
const BLOCK_800: [u8; 1090] = [56,0,0,0,0,0,0,0,99,204,254,187,34,79,63,176,85,2,25,178,2,58,207,246,52,129,103,93,213,30,201,103,62,91,209,240,153,149,10,108,29,204,77,232,222,199,93,122,171,133,181,103,182,204,212,26,211,18,69,27,148,138,116,19,240,161,66,253,64,212,147,71,139,108,143,217,61,111,76,234,66,187,179,69,219,198,240,223,219,91,236,115,109,59,128,14,135,186,121,124,108,233,9,248,248,28,148,239,169,236,7,113,252,219,80,90,188,241,36,100,60,155,255,192,194,219,85,40,101,52,63,148,136,215,236,9,115,76,109,198,42,57,179,29,242,243,247,63,245,183,163,36,22,152,182,164,139,178,169,145,221,108,192,188,109,179,16,236,225,168,101,201,181,93,147,112,120,224,216,149,129,86,51,72,172,83,32,189,221,240,247,117,157,79,181,212,207,191,211,235,137,205,183,106,181,191,172,185,255,125,199,247,63,179,94,127,172,208,13,190,11,223,175,222,143,95,247,205,207,213,190,253,79,126,103,255,220,239,151,248,63,195,239,187,221,229,122,167,158,236,119,209,215,32,121,113,223,252,229,190,95,39,169,233,189,189,91,63,249,123,230,42,53,229,238,234,253,125,7,31,134,59,47,250,253,55,180,124,231,214,211,252,179,223,253,255,190,253,143,71,155,1,149,247,186,222,151,207,254,109,229,17,219,175,103,223,86,123,23,55,158,111,61,91,224,237,157,117,175,245,255,253,207,183,214,175,25,246,127,249,191,181,236,221,184,247,91,240,202,235,0,211,91,111,23,244,244,23,123,75,110,191,215,211,255,174,197,167,59,158,113,56,198,119,179,233,183,111,124,237,109,30,223,54,134,217,206,127,130,243,95,214,218,206,127,134,187,90,112,239,235,127,124,181,127,127,238,107,29,60,233,41,116,123,255,95,80,137,249,163,179,240,191,62,31,240,215,38,94,190,60,106,111,203,101,237,190,151,120,255,173,223,88,108,2,0,0,0,0,0,0,0,56,170,28,1,0,0,0,0,169,27,243,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,91,216,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,83,167,98,0,0,0,0,216,131,1,1,9,132,103,101,116,104,136,103,111,49,46,49,55,46,54,133,108,105,110,117,120,0,0,0,195,22,123,223,1,36,101,23,108,70,26,251,49,110,188,119,60,97,250,238,133,166,81,93,170,41,94,38,73,92,239,111,105,223,166,153,17,217,216,228,243,187,173,184,155,43,58,108,8,147,17,180,120,191,98,156,41,215,144,167,166,219,63,193,185,45,76,64,123,190,73,67,142,216,89,254,150,91,20,13,207,26,171,113,169,63,52,155,186,254,193,85,24,25,184,190,30,254,162,252,70,202,116,154,161,104,91,29,237,128,19,120,93,102,35,204,24,210,20,50,11,107,182,71,89,112,246,87,22,78,91,117,104,155,100,183,253,31,162,117,243,52,242,142,24,114,182,28,96,20,52,45,145,68,112,236,122,194,151,91,227,69,121,108,43,122,226,245,185,227,134,205,27,80,164,85,6,150,217,87,203,73,0,240,58,139,108,143,217,61,111,76,234,66,187,179,69,219,198,240,223,219,91,236,115,159,140,205,175,204,57,243,199,214,235,246,55,201,21,22,115,203,195,107,136,166,247,155,96,53,159,20,29,249,10,12,116,81,37,177,49,202,175,253,18,170,207,106,129,25,247,225,22,35,181,164,61,166,56,233,31,102,154,19,15,172,14,21,160,56,238,223,198,139,163,195,92,115,254,213,190,74,7,175,181,190,128,125,221,176,116,99,156,217,250,97,180,118,118,192,100,252,80,214,44,206,47,215,84,78,11,44,201,70,146,212,167,4,222,190,247,188,182,19,40,226,211,167,57,239,252,211,169,147,135,208,21,226,96,238,250,199,46,190,161,233,174,50,97,164,117,162,123,177,2,143,20,11,194,167,200,67,49,138,253,234,10,110,60,81,27,189,16,244,81,158,206,55,220,36,136,126,17,181,93,238,34,99,121,219,131,207,252,104,20,149,115,12,17,253,222,121,186,76,12,239,2,116,227,24,16,201,223,2,249,143,175,222,15,132,31,78,102,161,205,153,149,201,126,43,156,64,54,59,93,102,217,206,113,167,235,179,150,190,166,106,31,107,41,20,253,213,189,146,160,254,156,122,177,167,109,222,29,241,37,198,106,107,110,219,160,74,8,91,48,58,1,46,149,105,36,99,251,94,232,95,191,194,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
const BLOCK_997: [u8; 670] = [56,0,0,0,0,0,0,0,118,202,149,151,52,193,192,182,25,4,199,71,191,254,212,113,129,251,66,6,54,139,31,183,189,81,84,101,219,60,141,117,29,204,77,232,222,199,93,122,171,133,181,103,182,204,212,26,211,18,69,27,148,138,116,19,240,161,66,253,64,212,147,71,233,174,50,97,164,117,162,123,177,2,143,20,11,194,167,200,67,49,138,253,229,76,203,34,244,191,203,226,240,218,156,94,33,63,171,108,160,9,98,136,247,218,219,79,21,189,144,9,104,110,248,212,217,120,65,189,203,16,33,209,51,197,16,42,90,248,219,226,231,195,221,161,60,54,198,196,56,91,1,246,31,136,60,132,115,155,219,75,59,91,108,181,164,70,0,185,101,138,209,153,185,240,154,7,55,83,73,92,146,21,37,186,126,223,92,126,239,104,167,110,236,23,85,184,158,221,111,228,155,186,127,104,230,39,208,124,221,249,253,174,95,59,223,178,78,225,105,123,110,127,31,15,188,255,159,77,251,249,62,184,47,254,18,223,207,219,159,211,191,222,175,191,59,173,170,63,247,181,251,241,236,191,246,126,110,253,254,118,221,31,187,251,255,179,235,47,248,251,63,239,87,213,127,111,231,189,188,205,218,151,205,59,207,61,222,127,238,94,250,255,113,31,239,241,140,240,255,111,155,186,254,247,214,255,190,245,159,247,111,85,228,239,247,123,93,51,171,63,247,47,253,37,59,223,247,255,253,95,188,217,183,60,158,165,144,111,223,185,245,255,157,217,142,251,248,187,175,93,218,119,250,219,223,70,205,88,255,157,91,255,132,218,254,231,191,214,125,227,244,133,44,220,59,255,125,253,233,238,227,59,215,191,105,14,230,46,229,219,191,247,216,191,254,231,187,255,233,254,187,185,235,189,62,5,111,250,154,219,237,189,119,250,254,223,231,111,125,254,159,78,54,189,167,235,126,127,222,239,126,235,95,229,77,236,158,107,63,125,239,217,75,232,2,0,0,0,0,0,0,0,253,170,28,1,0,0,0,0,39,83,238,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,76,115,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,85,167,98,0,0,0,0,217,131,1,1,10,132,103,101,116,104,137,103,111,49,46,49,54,46,49,53,133,108,105,110,117,120,0,0,195,22,123,223,0,9,143,222,90,175,216,225,192,38,91,237,8,54,181,194,214,141,15,208,99,252,167,184,184,50,73,178,52,15,201,118,30,56,15,56,194,174,68,139,0,225,208,234,44,6,0,95,230,71,156,81,148,188,54,92,191,127,228,55,163,22,140,226,10,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];

 // Receipts for testing
const RECEIPT_400: [u8; 440] = [1,98,216,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,92,67,36,3,157,169,28,82,197,93,245,215,133,56,90,171,7,61,207,12,221,242,82,173,27,226,200,155,105,194,176,104,252,55,141,170,149,43,167,241,99,196,161,22,40,245,90,77,245,35,179,239,0,0,0,0,0,0,0,0,0,0,0,0,69,34,93,53,54,172,2,146,143,22,7,26,176,80,102,188,233,92,44,213,0,0,0,0,0,0,0,0,0,0,0,0,255,122,224,66,69,43,5,132,229,17,109,14,153,33,238,211,37,21,12,22,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,214,245,95,16,52,104,0];
const PROOF_400: [u8; 1282] = [12,209,4,249,1,49,160,86,132,220,17,195,212,250,27,162,245,193,68,171,138,4,197,211,108,97,45,194,157,207,143,193,199,208,41,147,139,231,223,160,215,136,212,98,37,236,95,218,188,213,63,95,123,137,182,52,229,192,191,81,16,148,166,122,21,166,186,162,197,54,129,73,160,50,61,111,195,180,138,33,29,62,222,98,136,183,249,241,95,111,97,30,215,197,0,200,66,107,236,236,88,81,74,152,72,160,240,200,46,88,60,244,94,149,203,81,87,100,79,230,101,204,158,202,115,116,217,102,54,34,55,244,22,202,92,237,193,212,160,156,15,220,133,51,133,228,189,31,134,61,17,122,104,120,132,236,68,20,1,213,128,72,132,252,196,32,139,212,167,50,79,160,209,146,141,170,150,201,86,84,41,125,55,3,135,58,5,247,27,225,38,116,187,125,103,118,23,112,131,59,45,161,188,97,160,180,173,188,137,53,81,30,149,196,196,4,143,152,60,119,11,49,169,24,173,2,118,118,66,168,246,4,20,98,144,225,138,160,79,217,183,86,176,10,70,190,31,172,253,22,153,29,138,91,242,125,155,105,77,26,216,85,7,134,58,141,69,45,51,92,160,157,151,129,34,116,159,78,68,243,49,126,254,215,176,0,99,211,100,141,22,150,127,211,216,211,138,49,231,99,244,107,169,128,128,128,128,128,128,128,128,81,8,249,2,17,160,169,81,88,13,54,213,36,164,205,51,0,101,154,193,218,254,198,224,154,105,87,203,161,23,112,5,157,246,7,49,193,93,160,133,13,102,21,69,215,241,0,158,202,189,174,172,36,10,137,180,82,211,245,130,153,49,143,212,243,22,168,165,187,193,220,160,131,166,197,103,203,111,14,64,124,165,5,227,95,70,233,176,77,30,29,131,161,16,197,122,146,76,171,13,26,140,205,228,160,203,109,12,210,133,166,57,99,194,74,94,95,237,122,72,247,230,165,132,26,113,64,176,53,180,199,212,47,237,168,140,219,160,31,66,131,73,181,100,76,38,4,195,124,12,7,243,91,94,152,175,164,89,240,130,149,127,218,139,0,221,196,244,237,247,160,78,204,90,149,44,133,229,155,109,187,23,118,208,176,20,185,88,196,169,114,44,2,186,115,18,248,69,24,89,169,137,148,160,207,26,157,148,70,57,67,161,127,186,121,80,213,253,167,222,118,43,173,122,56,252,118,164,215,38,112,242,41,66,15,29,160,54,150,164,0,225,196,48,222,226,52,133,116,127,71,229,189,17,217,113,36,146,181,251,126,20,63,187,80,48,218,199,63,160,50,157,25,119,100,134,44,174,163,0,90,202,139,211,239,168,133,82,31,133,101,182,143,25,169,248,253,230,127,96,182,5,160,61,169,98,179,40,153,231,71,114,43,120,162,255,149,190,41,168,234,238,111,210,22,247,182,124,132,14,150,127,58,13,18,160,119,71,196,209,133,220,174,246,89,192,253,176,22,59,185,112,113,125,175,121,26,206,48,81,68,44,63,146,109,73,112,164,160,206,223,227,3,45,177,226,148,154,166,71,116,201,199,132,92,38,133,11,69,65,150,170,34,16,141,36,137,25,44,164,123,160,15,120,235,255,255,115,146,84,91,234,225,114,190,224,8,248,163,126,157,187,32,198,200,118,176,144,70,28,249,16,107,81,160,164,247,105,92,239,108,168,83,203,62,116,141,79,38,11,154,207,0,175,39,189,120,88,188,98,167,42,186,230,56,189,146,160,61,41,103,215,203,132,145,101,137,185,203,107,193,211,233,182,2,31,135,5,205,59,208,98,187,144,33,102,170,2,150,226,160,116,35,74,208,253,204,228,200,245,180,78,104,24,146,238,169,253,11,110,138,173,250,82,210,131,153,0,92,163,62,200,107,128,197,6,249,1,174,32,185,1,170,249,1,167,1,131,185,216,98,185,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,157,248,155,148,4,92,67,36,3,157,169,28,82,197,93,245,215,133,56,90,171,7,61,207,248,99,160,221,242,82,173,27,226,200,155,105,194,176,104,252,55,141,170,149,43,167,241,99,196,161,22,40,245,90,77,245,35,179,239,160,0,0,0,0,0,0,0,0,0,0,0,0,69,34,93,53,54,172,2,146,143,22,7,26,176,80,102,188,233,92,44,213,160,0,0,0,0,0,0,0,0,0,0,0,0,255,122,224,66,69,43,5,132,229,17,109,14,153,33,238,211,37,21,12,22,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,214,245,95,16,52,104,0,4,111];
const PROOF_INVALID_PATH: [u8; 1282] = [12,209,4,249,1,49,160,86,132,22,17,195,212,250,27,162,245,193,68,171,138,4,197,211,108,97,45,194,157,207,143,193,199,208,41,147,139,231,223,160,215,136,212,98,37,236,95,218,188,213,63,95,123,137,182,52,229,192,191,81,16,148,166,122,21,166,186,162,197,54,129,73,160,50,61,111,195,180,138,33,29,62,222,98,136,183,249,241,95,111,97,30,215,197,0,200,66,107,236,236,88,81,74,152,72,160,240,200,46,88,60,244,94,149,203,81,87,100,79,230,101,204,158,202,115,116,217,102,54,34,55,244,22,202,92,237,193,212,160,156,15,220,133,51,133,228,189,31,134,61,17,122,104,120,132,236,68,20,1,213,128,72,132,252,196,32,139,212,167,50,79,160,209,146,141,170,150,201,86,84,41,125,55,3,135,58,5,247,27,225,38,116,187,125,103,118,23,112,131,59,45,161,188,97,160,180,173,188,137,53,81,30,149,196,196,4,143,152,60,119,11,49,169,24,173,2,118,118,66,168,246,4,20,98,144,225,138,160,79,217,183,86,176,10,70,190,31,172,253,22,153,29,138,91,242,125,155,105,77,26,216,85,7,134,58,141,69,45,51,92,160,157,151,129,34,116,159,78,68,243,49,126,254,215,176,0,99,211,100,141,22,150,127,211,216,211,138,49,231,99,244,107,169,128,128,128,128,128,128,128,128,81,8,249,2,17,160,169,81,88,13,54,213,36,164,205,51,0,101,154,193,218,254,198,224,154,105,87,203,161,23,112,5,157,246,7,49,193,93,160,133,13,102,21,69,215,241,0,158,202,189,174,172,36,10,137,180,82,211,245,130,153,49,143,212,243,22,168,165,187,193,220,160,131,166,197,103,203,111,14,64,124,165,5,227,95,70,233,176,77,30,29,131,161,16,197,122,146,76,171,13,26,140,205,228,160,203,109,12,210,133,166,57,99,194,74,94,95,237,122,72,247,230,165,132,26,113,64,176,53,180,199,212,47,237,168,140,219,160,31,66,131,73,181,100,76,38,4,195,124,12,7,243,91,94,152,175,164,89,240,130,149,127,218,139,0,221,196,244,237,247,160,78,204,90,149,44,133,229,155,109,187,23,118,208,176,20,185,88,196,169,114,44,2,186,115,18,248,69,24,89,169,137,148,160,207,26,157,148,70,57,67,161,127,186,121,80,213,253,167,222,118,43,173,122,56,252,118,164,215,38,112,242,41,66,15,29,160,54,150,164,0,225,196,48,222,226,52,133,116,127,71,229,189,17,217,113,36,146,181,251,126,20,63,187,80,48,218,199,63,160,50,157,25,119,100,134,44,174,163,0,90,202,139,211,239,168,133,82,31,133,101,182,143,25,169,248,253,230,127,96,182,5,160,61,169,98,179,40,153,231,71,114,43,120,162,255,149,190,41,168,234,238,111,210,22,247,182,124,132,14,150,127,58,13,18,160,119,71,196,209,133,220,174,246,89,192,253,176,22,59,185,112,113,125,175,121,26,206,48,81,68,44,63,146,109,73,112,164,160,206,223,227,3,45,177,226,148,154,166,71,116,201,199,132,92,38,133,11,69,65,150,170,34,16,141,36,137,25,44,164,123,160,15,120,235,255,255,115,146,84,91,234,225,114,190,224,8,248,163,126,157,187,32,198,200,118,176,144,70,28,249,16,107,81,160,164,247,105,92,239,108,168,83,203,62,116,141,79,38,11,154,207,0,175,39,189,120,88,188,98,167,42,186,230,56,189,146,160,61,41,103,215,203,132,145,101,137,185,203,107,193,211,233,182,2,31,135,5,205,59,208,98,187,144,33,102,170,2,150,226,160,116,35,74,208,253,204,228,200,245,180,78,104,24,146,238,169,253,11,110,138,173,250,82,210,131,153,0,92,163,62,200,107,128,197,6,249,1,174,32,185,1,170,249,1,167,1,131,185,216,98,185,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,157,248,155,148,4,92,67,36,3,157,169,28,82,197,93,245,215,133,56,90,171,7,61,207,248,99,160,221,242,82,173,27,226,200,155,105,194,176,104,252,55,141,170,149,43,167,241,99,196,161,22,40,245,90,77,245,35,179,239,160,0,0,0,0,0,0,0,0,0,0,0,0,69,34,93,53,54,172,2,146,143,22,7,26,176,80,102,188,233,92,44,213,160,0,0,0,0,0,0,0,0,0,0,0,0,255,122,224,66,69,43,5,132,229,17,109,14,153,33,238,211,37,21,12,22,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,214,245,95,16,52,104,0,4,111];
const PROOF_INVALID_INDEX: [u8; 1282] = [12,209,4,249,1,49,160,86,132,220,17,195,212,250,27,162,245,193,68,171,138,4,197,211,108,97,45,194,157,207,143,193,199,208,41,147,139,231,223,160,215,136,212,98,37,236,95,218,188,213,63,95,123,137,182,52,229,192,191,81,16,148,166,122,21,166,186,162,197,54,129,73,160,50,61,111,195,180,138,33,29,62,222,98,136,183,249,241,95,111,97,30,215,197,0,200,66,107,236,236,88,81,74,152,72,160,240,200,46,88,60,244,94,149,203,81,87,100,79,230,101,204,158,202,115,116,217,102,54,34,55,244,22,202,92,237,193,212,160,156,15,220,133,51,133,228,189,31,134,61,17,122,104,120,132,236,68,20,1,213,128,72,132,252,196,32,139,212,167,50,79,160,209,146,141,170,150,201,86,84,41,125,55,3,135,58,5,247,27,225,38,116,187,125,103,118,23,112,131,59,45,161,188,97,160,180,173,188,137,53,81,30,149,196,196,4,143,152,60,119,11,49,169,24,173,2,118,118,66,168,246,4,20,98,144,225,138,160,79,217,183,86,176,10,70,190,31,172,253,22,153,29,138,91,242,125,155,105,77,26,216,85,7,134,58,141,69,45,51,92,160,157,151,129,34,116,159,78,68,243,49,126,254,215,176,0,99,211,100,141,22,150,127,211,216,211,138,49,231,99,244,107,169,128,128,128,128,128,128,128,128,81,8,249,2,17,160,169,81,88,13,54,213,36,164,205,51,0,101,154,193,218,254,198,224,154,105,87,203,161,23,112,5,157,246,7,49,193,93,160,133,13,102,21,69,215,241,0,158,202,189,174,172,36,10,137,180,82,211,245,130,153,49,143,212,243,22,168,165,187,193,220,160,131,166,197,103,203,111,14,64,124,165,5,227,95,70,233,176,77,30,29,131,161,16,197,122,146,76,171,13,26,140,205,228,160,203,109,12,210,133,166,57,99,194,74,94,95,237,122,72,247,230,165,132,26,113,64,176,53,180,199,212,47,237,168,140,219,160,31,66,131,73,181,100,76,38,4,195,124,12,7,243,91,94,152,175,164,89,240,130,149,127,218,139,0,221,196,244,237,247,160,78,204,90,149,44,133,229,155,109,187,23,118,208,176,20,185,88,196,169,114,44,2,186,115,18,248,69,24,89,169,137,148,160,207,26,157,148,70,57,67,161,127,186,121,80,213,253,167,222,118,43,173,122,56,252,118,164,215,38,112,242,41,66,15,29,160,54,150,164,0,225,196,48,222,226,52,133,116,127,71,229,189,17,217,113,36,146,181,251,126,20,63,187,80,48,218,199,63,160,50,157,25,119,100,134,44,174,163,0,90,202,139,211,239,168,133,82,31,133,101,182,143,25,169,248,253,230,127,96,182,5,160,61,169,98,179,40,153,231,71,114,43,120,162,255,149,190,41,168,234,238,111,210,22,247,182,124,132,14,150,127,58,13,18,160,119,71,196,209,133,220,174,246,89,192,253,176,22,59,185,112,113,125,175,121,26,206,48,81,68,44,63,146,109,73,112,164,160,206,223,227,3,45,177,226,148,154,166,71,116,201,199,132,92,38,133,11,69,65,150,170,34,16,141,36,137,25,44,164,123,160,15,120,235,255,255,115,146,84,91,234,225,114,190,224,8,248,163,126,157,187,32,198,200,118,176,144,70,28,249,16,107,81,160,164,247,105,92,239,108,168,83,203,62,116,141,79,38,11,154,207,0,175,39,189,120,88,188,98,167,42,186,230,56,189,146,160,61,41,103,215,203,132,145,101,137,185,203,107,193,211,233,182,2,31,135,5,205,59,208,98,187,144,33,102,170,2,150,226,160,116,35,74,208,253,204,228,200,245,180,78,104,24,146,238,169,253,11,110,138,173,250,82,210,131,153,0,92,163,62,200,107,128,197,6,249,1,174,32,185,1,170,249,1,167,1,131,185,216,98,185,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,157,248,155,148,4,92,67,36,3,157,169,28,82,197,93,245,215,133,56,90,171,7,61,207,248,99,160,221,242,82,173,27,226,200,155,105,194,176,104,252,55,141,170,149,43,167,241,99,196,161,22,40,245,90,77,245,35,179,239,160,0,0,0,0,0,0,0,0,0,0,0,0,69,34,93,53,54,172,2,146,143,22,7,26,176,80,102,188,233,92,44,213,160,0,0,0,0,0,0,0,0,0,0,0,0,255,122,224,66,69,43,5,132,229,17,109,14,153,33,238,211,37,21,12,22,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,214,245,95,16,52,104,0,4,101];
const RECEIPT_CORRUPT: [u8; 440] = [255,98,216,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,92,67,36,3,157,169,28,82,197,93,245,215,133,56,90,171,7,61,207,12,221,242,82,173,27,226,200,155,105,194,176,104,252,55,141,170,149,43,167,241,99,196,161,22,40,245,90,77,245,35,179,239,0,0,0,0,0,0,0,0,0,0,0,0,69,34,93,53,54,172,2,146,143,22,7,26,176,80,102,188,233,92,44,213,0,0,0,0,0,0,0,0,0,0,0,0,255,122,224,66,69,43,5,132,229,17,109,14,153,33,238,211,37,21,12,22,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,214,245,95,16,52,104,0];
const RECEIPT_HIGH_INDEX_997: [u8; 440] = [1,169,182,109,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,8,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,4,58,104,169,205,24,140,50,74,69,192,104,102,239,209,199,150,5,182,104,39,12,221,242,82,173,27,226,200,155,105,194,176,104,252,55,141,170,149,43,167,241,99,196,161,22,40,245,90,77,245,35,179,239,0,0,0,0,0,0,0,0,0,0,0,0,237,249,73,22,186,33,156,63,151,53,245,20,134,141,63,196,241,214,233,41,0,0,0,0,0,0,0,0,0,0,0,0,171,118,241,241,161,86,233,255,26,146,166,152,39,132,65,164,192,225,165,121,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,24,136,147];
const PROOF_997: [u8; 1878] = [24,209,4,249,1,49,160,23,191,207,50,147,157,184,109,162,121,209,101,116,82,102,45,10,46,187,233,162,25,125,231,205,148,89,156,5,227,145,156,160,192,195,91,166,103,98,168,179,152,82,178,186,40,17,133,145,23,116,82,246,164,67,154,248,164,61,86,59,174,248,66,10,160,213,112,133,12,189,197,223,63,158,12,216,212,173,33,80,134,254,62,184,57,18,63,109,227,137,91,183,247,89,234,170,194,160,92,139,202,176,176,67,220,86,202,201,80,10,74,249,140,108,168,42,2,238,116,214,126,242,251,134,228,243,149,112,36,240,160,70,87,44,32,137,205,182,171,63,21,171,141,13,133,75,6,114,42,99,116,13,186,46,83,0,136,201,190,244,178,154,248,160,177,255,149,19,136,169,209,170,210,87,239,209,126,192,90,149,242,128,73,77,44,10,245,165,206,229,141,160,218,241,61,153,160,217,74,224,233,155,71,178,209,91,201,241,4,121,189,205,85,166,157,37,216,200,40,226,135,102,138,168,211,30,168,158,106,160,230,167,75,10,52,0,11,244,15,102,234,60,146,24,93,119,144,11,252,197,111,199,108,54,3,23,20,79,232,157,98,156,160,181,156,92,126,11,168,234,135,245,97,159,53,43,209,234,99,29,152,251,61,201,141,10,221,238,227,157,196,67,138,125,137,128,128,128,128,128,128,128,128,205,1,248,113,160,42,232,167,160,71,106,88,233,107,226,170,67,193,45,106,212,13,48,49,238,59,56,224,181,203,48,126,34,85,60,135,245,160,197,67,21,184,6,21,68,184,126,186,246,249,41,221,21,185,9,253,153,91,88,170,224,64,119,83,141,65,190,53,117,206,160,112,95,40,20,186,205,248,133,172,191,70,68,65,220,204,168,23,15,216,128,66,163,99,189,32,81,231,244,253,167,219,28,128,128,128,128,128,128,128,128,128,128,128,128,128,128,148,228,130,0,1,160,114,183,168,83,18,187,32,164,58,241,160,95,176,61,240,89,63,16,83,45,28,64,3,21,69,191,22,18,74,216,105,92,209,6,249,1,177,160,32,205,13,23,226,136,141,144,93,50,125,126,224,163,223,222,250,183,157,214,1,124,114,119,152,246,167,232,35,207,217,140,160,29,38,217,72,185,222,4,25,155,88,251,142,169,122,113,34,63,2,10,155,42,165,40,224,32,238,192,160,123,216,198,185,160,55,57,140,134,252,151,217,200,167,171,66,180,228,249,19,220,58,64,63,26,157,220,38,61,213,151,197,53,216,227,175,170,160,108,129,251,161,56,38,16,235,133,40,73,67,119,29,148,20,147,248,147,187,214,202,75,101,151,25,156,154,254,170,220,159,160,152,207,70,165,12,42,61,234,212,96,225,30,252,103,162,151,157,212,229,243,113,44,113,178,93,185,201,204,109,198,46,213,160,10,42,165,25,45,128,171,25,14,111,196,7,198,255,133,254,106,174,28,141,35,234,229,234,72,43,138,23,172,60,145,42,160,76,58,77,245,246,35,77,118,207,134,224,97,215,89,164,106,107,37,96,38,129,159,132,109,91,64,251,163,159,200,223,19,160,61,250,21,73,37,79,20,135,81,15,112,84,49,191,230,115,59,70,0,93,97,228,28,52,209,142,90,109,230,152,207,106,160,138,254,204,33,155,27,190,93,88,150,239,121,120,84,164,243,248,106,196,12,161,212,190,75,11,67,227,217,64,111,125,30,160,66,30,25,147,12,239,1,51,110,100,29,103,152,230,159,232,46,212,45,104,12,11,82,149,244,57,235,117,237,152,227,177,160,254,38,224,236,240,226,149,167,54,177,206,218,56,241,132,205,68,99,199,184,109,225,40,225,145,193,164,5,184,99,91,244,160,138,103,70,212,85,16,180,194,200,209,169,192,219,244,78,171,86,225,41,50,133,163,58,40,102,121,27,2,100,221,250,156,160,131,72,125,141,242,104,208,248,196,159,84,235,27,107,161,195,124,128,211,245,114,88,214,193,117,152,205,39,157,249,122,16,128,128,128,128,81,8,249,2,17,160,244,208,213,122,207,189,198,229,151,35,145,140,178,75,251,85,110,228,94,42,223,123,23,212,220,168,152,188,67,251,54,45,160,32,148,191,234,94,221,187,251,147,34,41,133,87,20,170,251,85,186,11,167,182,90,232,122,87,244,82,58,165,234,192,126,160,28,120,123,53,160,158,154,84,182,159,133,61,69,185,23,255,207,147,36,46,91,3,203,134,14,70,56,229,182,167,92,139,160,41,127,67,10,81,232,163,136,84,227,68,69,96,28,7,66,213,212,111,72,97,181,240,108,143,221,38,36,15,198,87,208,160,225,162,117,19,192,164,82,24,28,180,165,247,177,181,53,207,164,108,83,12,204,63,104,154,216,185,148,36,138,20,24,83,160,177,171,110,179,2,192,228,86,132,144,167,205,219,38,195,240,182,33,54,53,192,67,193,250,197,222,56,214,186,2,57,8,160,33,38,111,234,47,101,237,0,105,165,200,75,159,239,91,194,103,66,158,174,189,28,232,103,245,145,154,95,81,130,108,221,160,239,224,230,217,168,110,194,95,42,242,8,75,189,93,113,132,193,99,189,227,180,150,23,114,191,65,35,246,220,214,92,10,160,255,100,142,35,245,92,231,144,183,79,187,99,50,123,250,73,135,44,173,47,34,57,191,124,36,121,178,66,179,90,221,180,160,49,82,19,189,113,163,29,248,61,173,100,65,155,137,38,55,64,249,125,88,161,226,236,202,24,98,122,2,240,165,178,18,160,61,96,163,248,48,254,61,235,111,31,229,23,253,64,83,64,12,114,55,244,67,36,45,87,230,150,196,192,197,205,211,165,160,17,241,202,195,137,227,233,81,8,208,97,65,89,197,127,72,62,111,25,63,218,64,48,174,71,0,63,165,135,43,56,65,160,185,23,8,111,253,232,182,230,99,12,199,119,44,60,23,238,227,66,232,87,210,100,127,77,18,59,39,78,149,170,243,210,160,210,157,112,145,243,203,78,163,131,181,44,51,173,100,175,23,106,8,44,152,90,157,34,213,88,240,191,145,181,80,136,80,160,50,232,255,154,212,76,168,90,225,58,29,253,114,248,72,249,134,52,7,245,63,134,113,55,89,196,8,201,110,57,16,214,160,172,253,64,3,103,29,112,238,193,42,62,30,45,75,54,152,194,99,14,139,153,51,4,15,80,198,15,91,197,54,152,114,128,201,6,249,1,175,32,185,1,171,249,1,168,1,132,2,109,182,169,185,1,0,0,0,0,2,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,8,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,248,157,248,155,148,58,104,169,205,24,140,50,74,69,192,104,102,239,209,199,150,5,182,104,39,248,99,160,221,242,82,173,27,226,200,155,105,194,176,104,252,55,141,170,149,43,167,241,99,196,161,22,40,245,90,77,245,35,179,239,160,0,0,0,0,0,0,0,0,0,0,0,0,237,249,73,22,186,33,156,63,151,53,245,20,134,141,63,196,241,214,233,41,160,0,0,0,0,0,0,0,0,0,0,0,0,171,118,241,241,161,86,233,255,26,146,166,152,39,132,65,164,192,225,165,121,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,24,136,147,12,130,1,189];

#[test]
fn init_bridge_instance_works_with_valid_header() {
	new_test_ext().execute_with(|| {
		// Dispatch a signed extrinsic.
		assert_ok!(BinanceFv::init_bridge_instance(BLOCK_200.to_vec()));

		// checks validator writes
		if let Some(val_set) = Validators::<Test>::get() {
			assert_eq!(val_set.last_update, 18280200);
			assert_eq!(val_set.validators.len(), 21);
		} else {
			assert!(false);
		}

		let valid_header: Header = Decode::decode(&mut &*BLOCK_200.to_vec()).unwrap();

		if let Some(header) = Headers::<Test>::get(valid_header.hash()) {
			assert_eq!(header, valid_header);
		} else {
			assert!(false);
		}

	});
}

#[test]
fn init_bridge_instance_fails_with_corrupt_header() {
	new_test_ext().execute_with(|| {
		// Dispatch a signed extrinsic.
		match BinanceFv::init_bridge_instance(CORRUPT_HEADER.to_vec()) {
			Ok(_) => assert!(false),
			Err(err) => assert!(true)
				// assert_eq!(err, crate::Error::<T>::InvalidEncoding.into())
		}
	});
}

#[test]
fn init_bridge_instance_fails_with_invalid_sig() {
	new_test_ext().execute_with(|| {
		// Dispatch a signed extrinsic.
		match BinanceFv::init_bridge_instance(INVALID_SIG.to_vec()) {
			Ok(_) => assert!(false),
			Err(err) => assert!(true) // WIP. Want to detect error type also
				// assert_eq!(err, crate::Error::<T>::InvalidEncoding.into())
		}
	});
}

#[test]
fn init_bridge_instance_fails_non_epoch_block() {
	new_test_ext().execute_with(|| {
		// Dispatch a signed extrinsic.
		match BinanceFv::init_bridge_instance(BLOCK_201.to_vec()) {
			Ok(_) => assert!(false),
			Err(err) => assert!(true) // WIP. Want to detect error type also
				// assert_eq!(err, crate::Error::<T>::InvalidEncoding.into())
		}
	});
}

#[test]
fn submit_header_works_with_correct_header() {
	new_test_ext().execute_with(|| {
		// init pallet
		BinanceFv::init_bridge_instance(BLOCK_200.to_vec());
		let validator_set_old = Validators::<Test>::get().unwrap();

		match BinanceFv::submit_header(Origin::signed(1), BLOCK_300.to_vec()) {
			Err(err) => assert!(false),
			_ => ()
		}

		//Submitted non-epoch block. ValidatorSet should stay the same
		match Validators::<Test>::try_get() {
			Ok(validator_set_new) => assert_eq!(validator_set_old, validator_set_new),
			Err(_) => assert!(false)
		}

		let header: Header = Decode::decode(&mut &*BLOCK_300.to_vec()).unwrap();

		match Headers::<Test>::try_get(&header.hash()) {
			Ok(stored_header) => assert_eq!(header, stored_header),
			Err(_) => assert!(false)
		}

		// Submit next block
		match BinanceFv::submit_header(Origin::signed(1), BLOCK_400.to_vec()) {
			Err(err) => assert!(false),
			_ => ()
		}

		//Submitted non-epoch block. ValidatorSet should stay the same
		match Validators::<Test>::try_get() {
			Ok(validator_set_new) => {
				assert_eq!(validator_set_new.last_update, 18280400);
				assert_eq!(validator_set_new.validators.len(), 21) // could have same validators
			}
			Err(_) => assert!(false)
		}

		let header: Header = Decode::decode(&mut &*BLOCK_400.to_vec()).unwrap();

		match Headers::<Test>::try_get(&header.hash()) {
			Ok(stored_header) => assert_eq!(header, stored_header),
			Err(_) => assert!(false)
		}

	});
}

#[test]
fn submit_header_fails_on_out_of_range() {
	new_test_ext().execute_with(|| {
		// init pallet
		BinanceFv::init_bridge_instance(BLOCK_200.to_vec());

		// this block can't be verified with the current ValidatorSet because its to far ahead
		// This checks validator_set_authorized
		match BinanceFv::submit_header(Origin::signed(1), BLOCK_401.to_vec()) {
			Ok(()) => assert!(false),
			Err(err) => () // check for correct error here
		}
	});
}

#[test]
fn submit_header_fails_on_backwards_submission() {
	new_test_ext().execute_with(|| {
		// init pallet
		BinanceFv::init_bridge_instance(BLOCK_400.to_vec());
		// This checks validator_set_authorized
		match BinanceFv::submit_header(Origin::signed(1), BLOCK_200.to_vec()) {
			Ok(()) => assert!(false),
			Err(err) => () // check for correct error here
		}
	});
}

#[test]
fn submit_header_prevents_fails_with_corrupt_header() {
	new_test_ext().execute_with(|| {
		// init pallet
		BinanceFv::init_bridge_instance(BLOCK_400.to_vec());
		let validator_set_old = Validators::<Test>::get().unwrap();
		match BinanceFv::submit_header(Origin::signed(1), CORRUPT_HEADER.to_vec()) {
			Ok(()) => assert!(false),
			Err(err) => () // check for correct error here
		}
	});
}

#[test]
fn submit_header_prevents_fails_with_invalid_sig() {
	new_test_ext().execute_with(|| {
		// init pallet
		BinanceFv::init_bridge_instance(BLOCK_400.to_vec());
		// This checks validator_set_authorized
		match BinanceFv::submit_header(Origin::signed(1), INVALID_SIG.to_vec()) {
			Ok(()) => assert!(false),
			Err(err) => () // check for correct error here
		}
	});
}

#[test]
fn submit_header_range_with_valid_data() {
	new_test_ext().execute_with(|| {
		// init pallet
		BinanceFv::init_bridge_instance(BLOCK_200.to_vec());
		// This checks validator_set_authorized
		let header: Header = Decode::decode(&mut &*BLOCK_200.to_vec()).unwrap();
		let mut range: Vec<Vec<u8>> = vec![BLOCK_195.to_vec(), BLOCK_196.to_vec(), BLOCK_197.to_vec(), BLOCK_198.to_vec(), BLOCK_199.to_vec()];

		range.reverse();
		match BinanceFv::submit_header_range(Origin::signed(1), range, header.hash().as_bytes().to_vec()) {
			Ok(()) => (),
			Err(err) => assert!(false) // check for correct error here
		}

		let header_195: Header = Decode::decode(&mut &*BLOCK_195.to_vec()).unwrap();
		let header_196: Header = Decode::decode(&mut &*BLOCK_196.to_vec()).unwrap();
		let header_197: Header = Decode::decode(&mut &*BLOCK_197.to_vec()).unwrap();
		let header_198: Header = Decode::decode(&mut &*BLOCK_198.to_vec()).unwrap();
		let header_199: Header = Decode::decode(&mut &*BLOCK_199.to_vec()).unwrap();


		assert_eq!(Headers::<Test>::iter().count(), 6);
		assert_eq!(Headers::<Test>::try_get(header_195.hash()).unwrap(), header_195);
		assert_eq!(Headers::<Test>::try_get(header_196.hash()).unwrap(), header_196);
		assert_eq!(Headers::<Test>::try_get(header_197.hash()).unwrap(), header_197);
		assert_eq!(Headers::<Test>::try_get(header_198.hash()).unwrap(), header_198);
		assert_eq!(Headers::<Test>::try_get(header_199.hash()).unwrap(), header_199);
	});
}

#[test]
fn submit_header_range_fails_with_anchor_not_found() {
	new_test_ext().execute_with(|| {
		// init pallet
		BinanceFv::init_bridge_instance(BLOCK_200.to_vec());
		// This checks validator_set_authorized
		let header: Header = Decode::decode(&mut &*BLOCK_201.to_vec()).unwrap();
		let mut range: Vec<Vec<u8>> = vec![BLOCK_195.to_vec(), BLOCK_196.to_vec(), BLOCK_197.to_vec(), BLOCK_198.to_vec(), BLOCK_199.to_vec()];

		range.reverse();
		match BinanceFv::submit_header_range(Origin::signed(1), range, header.hash().as_bytes().to_vec()) {
			Ok(()) => assert!(false),
			Err(_) => () // check for correct error here
		}
	});
}

#[test]
fn submit_header_range_fails_with_invalid_first_header() {
	new_test_ext().execute_with(|| {
		// init pallet
		BinanceFv::init_bridge_instance(BLOCK_200.to_vec());
		// This checks validator_set_authorized
		let header: Header = Decode::decode(&mut &*BLOCK_200.to_vec()).unwrap();
		let mut range: Vec<Vec<u8>> = vec![BLOCK_195.to_vec(), BLOCK_196.to_vec(), BLOCK_197.to_vec(), BLOCK_198.to_vec()];

		range.reverse();
		match BinanceFv::submit_header_range(Origin::signed(1), range, header.hash().as_bytes().to_vec()) {
			Ok(()) => (),
			Err(_) => assert!(false) // Transaction is supposed to pass, but no headers are supposed to be written
		}

		assert_eq!(Headers::<Test>::iter().count(), 1);
	});
}

#[test]
fn submit_header_range_writes_partial () {
	new_test_ext().execute_with(|| {
		// init pallet
		BinanceFv::init_bridge_instance(BLOCK_200.to_vec());
		// This checks validator_set_authorized
		let header: Header = Decode::decode(&mut &*BLOCK_200.to_vec()).unwrap();
		let mut range: Vec<Vec<u8>> = vec![BLOCK_195.to_vec(), BLOCK_196.to_vec(), BLOCK_198.to_vec(), BLOCK_199.to_vec()];

		range.reverse();
		match BinanceFv::submit_header_range(Origin::signed(1), range, header.hash().as_bytes().to_vec()) {
			Ok(()) => (),
			Err(_) => assert!(false) // Transaction is supposed to pass, but no headers are supposed to be written
		}

		assert_eq!(Headers::<Test>::iter().count(), 3);
		let header_199: Header = Decode::decode(&mut &*BLOCK_199.to_vec()).unwrap();
		let header_198: Header = Decode::decode(&mut &*BLOCK_198.to_vec()).unwrap();


		assert_eq!(Headers::<Test>::try_get(header_199.hash()).unwrap(), header_199);
		assert_eq!(Headers::<Test>::try_get(header_198.hash()).unwrap(), header_198);

	});
}

#[test]
fn check_inclusion_with_valid_data() {
	new_test_ext().execute_with(|| {
		// init pallet
		BinanceFv::init_bridge_instance(BLOCK_400.to_vec());
		// This checks validator_set_authorized
		let header: Header = Decode::decode(&mut &*BLOCK_400.to_vec()).unwrap();

		match BinanceFv::check_inclusion(RECEIPT_400.to_vec(), Some(PROOF_400.to_vec()), header.hash().to_fixed_bytes().to_vec()) {
			Ok(()) => (),
			Err(err) => assert!(false) // check for correct error here
		}
	});
}

#[test]
fn check_inclusion_fails_with_missing_header() {
	new_test_ext().execute_with(|| {
		// init pallet
		BinanceFv::init_bridge_instance(BLOCK_200.to_vec());
		// This checks validator_set_authorized
		let header: Header = Decode::decode(&mut &*BLOCK_400.to_vec()).unwrap();

		match BinanceFv::check_inclusion(RECEIPT_400.to_vec(), Some(PROOF_400.to_vec()), header.hash().to_fixed_bytes().to_vec()) {
			Ok(()) => assert!(false), // check for correct error here,
			Err(err) => ()
		}
	});
}

#[test]
fn check_inclusion_fails_with_wrong_proof_index() {
	new_test_ext().execute_with(|| {
		// init pallet
		BinanceFv::init_bridge_instance(BLOCK_400.to_vec());
		// This checks validator_set_authorized
		let header: Header = Decode::decode(&mut &*BLOCK_400.to_vec()).unwrap();

		match BinanceFv::check_inclusion(RECEIPT_400.to_vec(), Some(PROOF_INVALID_INDEX.to_vec()), header.hash().to_fixed_bytes().to_vec()) {
			Ok(()) => assert!(false), // check for correct error here,
			Err(err) => ()
		}
	});
}

#[test]
fn check_inclusion_fails_with_wrong_proof_path() {
	new_test_ext().execute_with(|| {
		// init pallet
		BinanceFv::init_bridge_instance(BLOCK_400.to_vec());
		// This checks validator_set_authorized
		let header: Header = Decode::decode(&mut &*BLOCK_400.to_vec()).unwrap();

		match BinanceFv::check_inclusion(RECEIPT_400.to_vec(), Some(PROOF_INVALID_PATH.to_vec()), header.hash().to_fixed_bytes().to_vec()) {
			Ok(()) => assert!(false), // check for correct error here,
			Err(err) => ()
		}
	});
}

#[test]
fn check_inclusion_passes_with_high_receipt_index() {
	new_test_ext().execute_with(|| {
		// init pallet
		BinanceFv::init_bridge_instance(BLOCK_800.to_vec());
		BinanceFv::submit_header(Origin::signed(1), BLOCK_997.to_vec());

		// This checks validator_set_authorized
		let header: Header = Decode::decode(&mut &*BLOCK_997.to_vec()).unwrap();

		match BinanceFv::check_inclusion(RECEIPT_HIGH_INDEX_997.to_vec(), Some(PROOF_997.to_vec()), header.hash().to_fixed_bytes().to_vec()) {
			Ok(()) => (),
			Err(err) => assert!(false), // check for correct error here,
		}
	});
}

