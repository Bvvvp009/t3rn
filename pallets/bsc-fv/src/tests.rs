use crate::{mock::*, Error, Validators, Headers, types::Header};
use frame_support::{assert_noop, assert_ok};
use sp_std::vec;
use sp_std::vec::Vec;
use codec::{Decode};
use sp_runtime::DispatchError;

// Headers for testing
const BLOCK_200: [u8; 1090] = [56, 0, 0, 0, 0, 0, 0, 0, 17, 221, 139, 143, 215, 88, 127, 210, 141, 1, 65, 71, 109, 44, 225, 115, 43, 236, 227, 71, 201, 59, 181, 79, 31, 236, 238, 185, 10, 245, 242, 157, 29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66, 253, 64, 212, 147, 71, 206, 47, 215, 84, 78, 11, 44, 201, 70, 146, 212, 167, 4, 222, 190, 247, 188, 182, 19, 40, 43, 221, 65, 48, 10, 18, 169, 152, 157, 157, 212, 59, 107, 20, 93, 185, 223, 75, 95, 132, 51, 248, 243, 197, 240, 155, 67, 175, 131, 81, 167, 151, 170, 118, 41, 50, 32, 181, 6, 22, 76, 212, 45, 137, 73, 157, 86, 80, 127, 84, 156, 103, 168, 137, 228, 4, 214, 40, 243, 17, 43, 106, 85, 185, 34, 111, 55, 172, 153, 75, 15, 240, 245, 170, 12, 236, 108, 52, 205, 187, 206, 214, 13, 137, 216, 189, 236, 145, 133, 55, 39, 60, 175, 185, 77, 234, 28, 224, 231, 108, 202, 167, 59, 16, 203, 31, 194, 197, 176, 7, 53, 239, 177, 140, 68, 123, 239, 100, 197, 249, 251, 150, 182, 224, 124, 110, 151, 128, 68, 205, 51, 95, 182, 5, 49, 201, 247, 83, 114, 53, 1, 89, 21, 210, 110, 251, 199, 153, 222, 211, 174, 170, 81, 103, 14, 192, 47, 245, 110, 169, 157, 210, 64, 116, 141, 86, 209, 62, 119, 43, 65, 216, 171, 85, 34, 60, 111, 86, 42, 97, 247, 246, 120, 95, 255, 53, 83, 54, 138, 156, 18, 78, 89, 53, 151, 123, 43, 55, 127, 64, 205, 175, 162, 217, 55, 232, 252, 51, 217, 67, 182, 207, 168, 174, 143, 239, 204, 99, 151, 189, 21, 202, 197, 243, 54, 50, 155, 189, 87, 45, 123, 135, 110, 195, 86, 229, 63, 57, 192, 214, 40, 172, 196, 111, 20, 39, 209, 222, 241, 155, 173, 77, 202, 128, 63, 176, 238, 11, 225, 173, 136, 222, 119, 13, 244, 145, 123, 109, 90, 111, 77, 30, 211, 237, 85, 218, 38, 206, 85, 233, 109, 103, 235, 127, 121, 230, 35, 204, 127, 215, 135, 15, 140, 9, 222, 115, 144, 159, 50, 193, 117, 227, 244, 50, 243, 23, 160, 102, 58, 219, 232, 217, 238, 162, 223, 158, 48, 149, 241, 42, 189, 179, 252, 221, 81, 85, 193, 67, 3, 44, 220, 94, 236, 190, 217, 18, 96, 185, 87, 159, 91, 222, 63, 78, 240, 202, 108, 33, 24, 245, 125, 46, 2, 0, 0, 0, 0, 0, 0, 0, 8, 239, 22, 1, 0, 0, 0, 0, 248, 170, 152, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164, 175, 151, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 3, 150, 98, 0, 0, 0, 0, 216, 131, 1, 1, 10, 132, 103, 101, 116, 104, 136, 103, 111, 49, 46, 49, 51, 46, 52, 133, 108, 105, 110, 117, 120, 0, 0, 0, 195, 22, 123, 223, 1, 36, 101, 23, 108, 70, 26, 251, 49, 110, 188, 119, 60, 97, 250, 238, 133, 166, 81, 93, 170, 41, 94, 38, 73, 92, 239, 111, 105, 223, 166, 153, 17, 217, 216, 228, 243, 187, 173, 184, 155, 41, 169, 124, 110, 255, 184, 164, 17, 218, 188, 106, 222, 239, 170, 132, 245, 6, 124, 139, 190, 45, 76, 64, 123, 190, 73, 67, 142, 216, 89, 254, 150, 91, 20, 13, 207, 26, 171, 113, 169, 63, 52, 155, 186, 254, 193, 85, 24, 25, 184, 190, 30, 254, 162, 252, 70, 202, 116, 154, 161, 104, 91, 29, 237, 128, 19, 120, 93, 102, 35, 204, 24, 210, 20, 50, 11, 107, 182, 71, 89, 112, 246, 87, 22, 78, 91, 117, 104, 155, 100, 183, 253, 31, 162, 117, 243, 52, 242, 142, 24, 114, 182, 28, 96, 20, 52, 45, 145, 68, 112, 236, 122, 194, 151, 91, 227, 69, 121, 108, 43, 122, 226, 245, 185, 227, 134, 205, 27, 80, 164, 85, 6, 150, 217, 87, 203, 73, 0, 240, 58, 139, 108, 143, 217, 61, 111, 76, 234, 66, 187, 179, 69, 219, 198, 240, 223, 219, 91, 236, 115, 159, 140, 205, 175, 204, 57, 243, 199, 214, 235, 246, 55, 201, 21, 22, 115, 203, 195, 107, 136, 166, 247, 155, 96, 53, 159, 20, 29, 249, 10, 12, 116, 81, 37, 177, 49, 202, 175, 253, 18, 170, 207, 106, 129, 25, 247, 225, 22, 35, 181, 164, 61, 166, 56, 233, 31, 102, 154, 19, 15, 172, 14, 21, 160, 56, 238, 223, 198, 139, 163, 195, 92, 115, 254, 213, 190, 74, 7, 175, 181, 190, 128, 125, 221, 176, 116, 99, 156, 217, 250, 97, 180, 118, 118, 192, 100, 252, 80, 214, 44, 206, 47, 215, 84, 78, 11, 44, 201, 70, 146, 212, 167, 4, 222, 190, 247, 188, 182, 19, 40, 226, 211, 167, 57, 239, 252, 211, 169, 147, 135, 208, 21, 226, 96, 238, 250, 199, 46, 190, 161, 233, 174, 50, 97, 164, 117, 162, 123, 177, 2, 143, 20, 11, 194, 167, 200, 67, 49, 138, 253, 234, 10, 110, 60, 81, 27, 189, 16, 244, 81, 158, 206, 55, 220, 36, 136, 126, 17, 181, 93, 238, 34, 99, 121, 219, 131, 207, 252, 104, 20, 149, 115, 12, 17, 253, 222, 121, 186, 76, 12, 239, 2, 116, 227, 24, 16, 201, 223, 2, 249, 143, 175, 222, 15, 132, 31, 78, 102, 161, 205, 228, 74, 234, 220, 4, 212, 237, 161, 132, 81, 230, 189, 214, 11, 79, 227, 201, 160, 96, 71, 113, 199, 58, 194, 14, 171, 44, 114, 47, 110, 235, 147, 117, 188, 71, 7, 29, 158, 183, 193, 163, 245, 6, 235, 60, 249, 117, 44, 164, 163, 147, 41, 245, 225, 212, 161, 3, 82, 201, 141, 95, 234, 75, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
const BLOCK_300: [u8; 670] = [56, 0, 0, 0, 0, 0, 0, 0, 236, 128, 148, 95, 189, 163, 167, 115, 252, 136, 233, 163, 36, 73, 118, 136, 134, 26, 19, 26, 96, 91, 178, 227, 98, 84, 247, 241, 22, 148, 126, 239, 29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66, 253, 64, 212, 147, 71, 159, 140, 205, 175, 204, 57, 243, 199, 214, 235, 246, 55, 201, 21, 22, 115, 203, 195, 107, 136, 152, 244, 245, 140, 223, 185, 53, 95, 86, 114, 96, 86, 192, 188, 123, 250, 69, 15, 183, 209, 159, 23, 152, 101, 176, 84, 154, 24, 174, 37, 44, 173, 239, 239, 130, 178, 243, 42, 169, 123, 64, 22, 183, 195, 76, 97, 215, 160, 0, 176, 208, 125, 58, 136, 192, 132, 83, 159, 5, 136, 19, 227, 169, 169, 191, 219, 97, 24, 112, 131, 21, 200, 38, 236, 229, 225, 152, 41, 139, 205, 241, 231, 185, 241, 195, 72, 21, 145, 130, 192, 144, 8, 204, 32, 2, 117, 188, 38, 147, 0, 8, 10, 81, 112, 198, 4, 0, 78, 197, 25, 13, 6, 170, 164, 70, 110, 212, 136, 15, 208, 35, 19, 69, 194, 62, 137, 95, 44, 0, 85, 10, 115, 44, 245, 20, 10, 155, 37, 9, 189, 130, 1, 17, 202, 27, 0, 62, 50, 86, 132, 137, 87, 68, 100, 98, 18, 86, 108, 114, 137, 129, 65, 165, 118, 37, 75, 70, 52, 87, 33, 219, 30, 69, 96, 107, 43, 103, 91, 86, 203, 137, 198, 76, 234, 236, 173, 102, 93, 201, 159, 204, 233, 23, 220, 158, 169, 111, 18, 135, 103, 183, 86, 62, 221, 16, 136, 57, 132, 110, 131, 65, 66, 155, 142, 119, 21, 124, 114, 85, 147, 99, 130, 239, 231, 191, 65, 132, 13, 182, 175, 104, 70, 199, 200, 4, 16, 200, 186, 143, 160, 96, 54, 204, 133, 61, 243, 101, 8, 169, 5, 29, 72, 97, 167, 187, 55, 14, 181, 176, 96, 6, 171, 54, 196, 41, 17, 137, 222, 106, 30, 150, 218, 32, 178, 7, 120, 70, 155, 69, 220, 70, 40, 33, 91, 33, 227, 246, 45, 48, 208, 108, 251, 3, 25, 206, 43, 84, 200, 53, 217, 25, 114, 83, 242, 113, 28, 32, 51, 33, 27, 60, 53, 106, 109, 37, 11, 145, 115, 245, 120, 36, 91, 126, 27, 1, 64, 116, 44, 51, 125, 183, 154, 70, 100, 23, 209, 84, 9, 124, 78, 231, 137, 13, 76, 247, 10, 74, 63, 185, 61, 15, 111, 2, 0, 0, 0, 0, 0, 0, 0, 108, 239, 22, 1, 0, 0, 0, 0, 105, 152, 167, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 106, 65, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 4, 150, 98, 0, 0, 0, 0, 217, 131, 1, 1, 10, 132, 103, 101, 116, 104, 137, 103, 111, 49, 46, 49, 54, 46, 49, 53, 133, 108, 105, 110, 117, 120, 0, 0, 195, 22, 123, 223, 0, 41, 249, 205, 23, 208, 8, 51, 177, 245, 163, 144, 236, 207, 192, 147, 16, 62, 203, 216, 222, 246, 176, 28, 99, 28, 41, 218, 40, 148, 54, 107, 73, 31, 159, 95, 22, 62, 230, 95, 30, 76, 73, 202, 46, 51, 103, 136, 250, 175, 162, 194, 221, 219, 55, 246, 219, 126, 61, 97, 211, 7, 155, 120, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
const BLOCK_400: [u8; 1090] = [56, 0, 0, 0, 0, 0, 0, 0, 243, 247, 170, 68, 94, 168, 240, 122, 56, 249, 106, 176, 222, 159, 140, 206, 75, 214, 28, 179, 0, 127, 181, 255, 43, 170, 245, 85, 13, 65, 195, 143, 29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66, 253, 64, 212, 147, 71, 104, 91, 29, 237, 128, 19, 120, 93, 102, 35, 204, 24, 210, 20, 50, 11, 107, 182, 71, 89, 141, 253, 180, 148, 144, 234, 70, 80, 154, 228, 41, 94, 91, 251, 174, 37, 162, 39, 239, 158, 208, 78, 72, 85, 74, 251, 228, 249, 115, 210, 53, 59, 217, 130, 39, 173, 222, 247, 132, 187, 135, 1, 22, 144, 40, 120, 128, 112, 185, 219, 113, 177, 64, 189, 188, 118, 245, 188, 51, 145, 105, 225, 137, 68, 95, 243, 132, 6, 46, 245, 218, 123, 33, 255, 248, 65, 145, 147, 32, 117, 221, 214, 158, 29, 90, 183, 176, 84, 27, 147, 118, 77, 20, 71, 55, 204, 38, 107, 162, 139, 12, 166, 27, 16, 178, 91, 4, 65, 236, 4, 142, 105, 78, 32, 135, 60, 148, 92, 33, 72, 127, 131, 198, 128, 130, 200, 137, 88, 104, 145, 54, 40, 128, 112, 49, 95, 238, 88, 182, 100, 129, 88, 71, 237, 15, 97, 168, 36, 206, 78, 72, 50, 24, 251, 103, 10, 24, 37, 173, 57, 1, 246, 54, 203, 249, 139, 102, 181, 223, 162, 29, 94, 132, 6, 239, 168, 117, 87, 41, 90, 170, 198, 28, 100, 178, 37, 198, 119, 220, 5, 196, 200, 86, 218, 142, 124, 107, 30, 21, 164, 191, 119, 34, 151, 20, 68, 216, 86, 152, 143, 34, 244, 226, 187, 132, 42, 24, 87, 197, 82, 135, 47, 132, 51, 72, 16, 236, 4, 49, 157, 17, 132, 77, 179, 156, 176, 217, 216, 53, 222, 98, 166, 12, 157, 148, 129, 249, 152, 193, 101, 125, 194, 136, 141, 28, 51, 131, 140, 75, 200, 243, 92, 215, 152, 150, 33, 205, 129, 38, 156, 47, 139, 107, 20, 69, 155, 200, 129, 209, 84, 26, 52, 162, 152, 142, 113, 68, 96, 65, 27, 15, 47, 52, 155, 166, 15, 36, 148, 178, 177, 72, 138, 23, 226, 165, 214, 16, 18, 69, 154, 77, 217, 38, 52, 59, 127, 84, 34, 240, 34, 0, 242, 124, 108, 198, 5, 113, 100, 67, 48, 117, 40, 152, 241, 128, 10, 197, 74, 54, 202, 198, 204, 101, 90, 132, 57, 234, 13, 33, 84, 3, 45, 2, 0, 0, 0, 0, 0, 0, 0, 208, 239, 22, 1, 0, 0, 0, 0, 66, 4, 181, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 76, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 6, 150, 98, 0, 0, 0, 0, 216, 131, 1, 1, 10, 132, 103, 101, 116, 104, 136, 103, 111, 49, 46, 49, 51, 46, 52, 133, 108, 105, 110, 117, 120, 0, 0, 0, 195, 22, 123, 223, 1, 36, 101, 23, 108, 70, 26, 251, 49, 110, 188, 119, 60, 97, 250, 238, 133, 166, 81, 93, 170, 41, 94, 38, 73, 92, 239, 111, 105, 223, 166, 153, 17, 217, 216, 228, 243, 187, 173, 184, 155, 41, 169, 124, 110, 255, 184, 164, 17, 218, 188, 106, 222, 239, 170, 132, 245, 6, 124, 139, 190, 45, 76, 64, 123, 190, 73, 67, 142, 216, 89, 254, 150, 91, 20, 13, 207, 26, 171, 113, 169, 63, 52, 155, 186, 254, 193, 85, 24, 25, 184, 190, 30, 254, 162, 252, 70, 202, 116, 154, 161, 104, 91, 29, 237, 128, 19, 120, 93, 102, 35, 204, 24, 210, 20, 50, 11, 107, 182, 71, 89, 112, 246, 87, 22, 78, 91, 117, 104, 155, 100, 183, 253, 31, 162, 117, 243, 52, 242, 142, 24, 114, 182, 28, 96, 20, 52, 45, 145, 68, 112, 236, 122, 194, 151, 91, 227, 69, 121, 108, 43, 122, 226, 245, 185, 227, 134, 205, 27, 80, 164, 85, 6, 150, 217, 87, 203, 73, 0, 240, 58, 139, 108, 143, 217, 61, 111, 76, 234, 66, 187, 179, 69, 219, 198, 240, 223, 219, 91, 236, 115, 159, 140, 205, 175, 204, 57, 243, 199, 214, 235, 246, 55, 201, 21, 22, 115, 203, 195, 107, 136, 166, 247, 155, 96, 53, 159, 20, 29, 249, 10, 12, 116, 81, 37, 177, 49, 202, 175, 253, 18, 170, 207, 106, 129, 25, 247, 225, 22, 35, 181, 164, 61, 166, 56, 233, 31, 102, 154, 19, 15, 172, 14, 21, 160, 56, 238, 223, 198, 139, 163, 195, 92, 115, 254, 213, 190, 74, 7, 175, 181, 190, 128, 125, 221, 176, 116, 99, 156, 217, 250, 97, 180, 118, 118, 192, 100, 252, 80, 214, 44, 206, 47, 215, 84, 78, 11, 44, 201, 70, 146, 212, 167, 4, 222, 190, 247, 188, 182, 19, 40, 226, 211, 167, 57, 239, 252, 211, 169, 147, 135, 208, 21, 226, 96, 238, 250, 199, 46, 190, 161, 233, 174, 50, 97, 164, 117, 162, 123, 177, 2, 143, 20, 11, 194, 167, 200, 67, 49, 138, 253, 234, 10, 110, 60, 81, 27, 189, 16, 244, 81, 158, 206, 55, 220, 36, 136, 126, 17, 181, 93, 238, 34, 99, 121, 219, 131, 207, 252, 104, 20, 149, 115, 12, 17, 253, 222, 121, 186, 76, 12, 239, 2, 116, 227, 24, 16, 201, 223, 2, 249, 143, 175, 222, 15, 132, 31, 78, 102, 161, 205, 225, 206, 184, 239, 238, 202, 255, 50, 251, 159, 138, 97, 5, 58, 86, 182, 9, 161, 87, 207, 150, 92, 169, 210, 124, 241, 138, 38, 231, 125, 95, 161, 53, 36, 241, 62, 46, 53, 4, 34, 63, 237, 21, 254, 35, 7, 184, 249, 167, 176, 60, 144, 109, 135, 11, 164, 81, 91, 237, 98, 17, 37, 81, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
const BLOCK_401: [u8; 670] = [56, 0, 0, 0, 0, 0, 0, 0, 157, 55, 33, 33, 7, 157, 246, 28, 81, 79, 213, 77, 3, 174, 185, 11, 47, 217, 59, 3, 37, 100, 176, 127, 252, 221, 248, 96, 159, 76, 14, 187, 29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66, 253, 64, 212, 147, 71, 112, 246, 87, 22, 78, 91, 117, 104, 155, 100, 183, 253, 31, 162, 117, 243, 52, 242, 142, 24, 37, 209, 13, 243, 0, 150, 68, 226, 184, 199, 193, 100, 250, 135, 62, 209, 221, 106, 215, 5, 124, 148, 40, 114, 161, 127, 177, 201, 45, 94, 221, 213, 156, 54, 2, 248, 153, 215, 179, 203, 189, 125, 67, 197, 96, 4, 125, 62, 138, 120, 19, 175, 172, 197, 236, 223, 77, 21, 236, 68, 150, 70, 92, 97, 14, 42, 56, 108, 175, 38, 49, 227, 152, 16, 194, 6, 72, 201, 200, 88, 158, 146, 38, 255, 108, 243, 18, 209, 37, 254, 249, 89, 246, 181, 207, 85, 48, 126, 223, 249, 106, 230, 217, 28, 246, 88, 165, 14, 255, 212, 247, 255, 247, 198, 206, 188, 231, 167, 111, 62, 219, 127, 254, 159, 126, 253, 87, 115, 85, 245, 84, 235, 245, 23, 247, 254, 199, 190, 115, 237, 199, 83, 157, 239, 123, 121, 151, 249, 175, 231, 253, 19, 113, 205, 170, 63, 61, 119, 173, 65, 175, 165, 36, 249, 249, 103, 118, 183, 229, 187, 230, 191, 223, 230, 235, 187, 255, 30, 159, 213, 247, 216, 235, 10, 250, 190, 142, 104, 217, 111, 47, 109, 239, 31, 246, 254, 175, 246, 25, 95, 118, 251, 83, 223, 14, 63, 191, 247, 250, 153, 187, 251, 140, 187, 191, 237, 51, 110, 81, 115, 207, 157, 247, 189, 243, 236, 225, 95, 254, 187, 254, 230, 12, 248, 126, 164, 123, 247, 254, 188, 222, 127, 230, 165, 248, 251, 247, 111, 185, 189, 251, 253, 138, 207, 91, 241, 239, 175, 148, 46, 189, 155, 251, 228, 39, 250, 73, 157, 118, 143, 253, 231, 170, 238, 87, 195, 237, 239, 35, 100, 239, 230, 123, 223, 111, 250, 243, 239, 233, 245, 119, 151, 63, 177, 152, 211, 255, 168, 80, 242, 89, 122, 247, 246, 127, 207, 235, 107, 210, 113, 118, 189, 190, 238, 233, 91, 95, 247, 162, 127, 95, 241, 183, 255, 126, 250, 150, 126, 117, 124, 158, 223, 252, 120, 119, 229, 217, 237, 239, 95, 221, 197, 223, 110, 124, 63, 222, 189, 120, 74, 142, 29, 2, 0, 0, 0, 0, 0, 0, 0, 209, 239, 22, 1, 0, 0, 0, 0, 69, 185, 186, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 42, 83, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 6, 150, 98, 0, 0, 0, 0, 216, 131, 1, 1, 10, 132, 103, 101, 116, 104, 136, 103, 111, 49, 46, 49, 51, 46, 52, 133, 108, 105, 110, 117, 120, 0, 0, 0, 195, 22, 123, 223, 0, 176, 79, 163, 192, 193, 149, 218, 254, 196, 86, 217, 223, 186, 240, 8, 64, 180, 10, 142, 234, 169, 13, 227, 6, 35, 249, 232, 136, 253, 101, 75, 119, 94, 195, 203, 200, 52, 34, 95, 171, 187, 62, 90, 12, 131, 242, 13, 111, 235, 86, 11, 1, 10, 80, 33, 110, 152, 53, 107, 20, 50, 229, 40, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
const INVALID_SIG: [u8; 1090] = [56, 0, 0, 0, 0, 0, 0, 0, 243, 247, 170, 68, 94, 168, 240, 122, 56, 249, 106, 176, 222, 159, 140, 206, 75, 214, 28, 179, 0, 127, 181, 255, 43, 170, 245, 85, 13, 65, 195, 143, 29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66, 253, 64, 212, 147, 71, 104, 91, 29, 237, 128, 19, 120, 93, 102, 35, 204, 24, 210, 20, 50, 11, 107, 182, 71, 89, 141, 253, 180, 148, 144, 234, 70, 80, 154, 228, 41, 94, 91, 251, 174, 37, 162, 39, 239, 158, 208, 78, 72, 85, 74, 251, 228, 249, 115, 210, 53, 59, 217, 130, 39, 173, 222, 247, 132, 187, 135, 1, 22, 144, 40, 120, 128, 112, 185, 219, 113, 177, 64, 189, 188, 118, 245, 188, 51, 145, 105, 225, 137, 68, 95, 243, 132, 6, 46, 245, 218, 123, 33, 255, 248, 65, 145, 147, 32, 117, 221, 214, 158, 29, 90, 183, 176, 84, 27, 147, 118, 77, 20, 71, 55, 204, 38, 107, 162, 139, 12, 166, 27, 16, 178, 91, 4, 65, 236, 4, 142, 105, 78, 32, 135, 60, 148, 92, 33, 72, 127, 131, 198, 128, 130, 200, 137, 88, 104, 145, 54, 40, 128, 112, 49, 95, 238, 88, 182, 100, 129, 88, 71, 237, 15, 97, 168, 36, 206, 78, 72, 50, 24, 251, 103, 10, 24, 37, 173, 57, 1, 246, 54, 203, 249, 139, 102, 181, 223, 162, 29, 94, 132, 6, 239, 168, 117, 87, 41, 90, 170, 198, 28, 100, 178, 37, 198, 119, 220, 5, 196, 200, 86, 218, 142, 124, 107, 30, 21, 164, 191, 119, 34, 151, 20, 68, 216, 86, 152, 143, 34, 244, 226, 187, 132, 42, 24, 87, 197, 82, 135, 47, 132, 51, 72, 16, 236, 4, 49, 157, 17, 132, 77, 179, 156, 176, 217, 216, 53, 222, 98, 166, 12, 157, 148, 129, 249, 152, 193, 101, 125, 194, 136, 141, 28, 51, 131, 140, 75, 200, 243, 92, 215, 152, 150, 33, 205, 129, 38, 156, 47, 139, 107, 20, 69, 155, 200, 129, 209, 84, 26, 52, 162, 152, 142, 113, 68, 96, 65, 27, 15, 47, 52, 155, 166, 15, 36, 148, 178, 177, 72, 138, 23, 226, 165, 214, 16, 18, 69, 154, 77, 217, 38, 52, 59, 127, 84, 34, 240, 34, 0, 242, 124, 108, 198, 5, 113, 100, 67, 48, 117, 40, 152, 241, 128, 10, 197, 74, 54, 202, 198, 204, 101, 90, 132, 57, 234, 13, 33, 84, 3, 45, 2, 0, 0, 0, 0, 0, 0, 0, 208, 239, 22, 1, 0, 0, 0, 0, 66, 4, 181, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 76, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 6, 150, 98, 0, 0, 0, 0, 216, 131, 1, 1, 10, 132, 103, 101, 116, 104, 136, 103, 111, 49, 46, 49, 51, 46, 52, 133, 108, 105, 110, 117, 120, 0, 0, 0, 195, 22, 123, 223, 1, 36, 101, 23, 108, 70, 26, 251, 49, 110, 188, 119, 60, 97, 250, 238, 133, 166, 81, 93, 170, 41, 94, 38, 73, 92, 239, 111, 105, 223, 166, 153, 17, 217, 216, 228, 243, 187, 173, 184, 155, 41, 169, 124, 110, 255, 184, 164, 17, 218, 188, 106, 222, 239, 170, 132, 245, 6, 124, 139, 190, 45, 76, 64, 123, 190, 73, 67, 142, 216, 89, 254, 150, 91, 20, 13, 207, 26, 171, 113, 169, 63, 52, 155, 186, 254, 193, 85, 24, 25, 184, 190, 30, 254, 162, 252, 70, 202, 116, 154, 161, 104, 91, 29, 237, 128, 19, 120, 93, 102, 35, 204, 24, 210, 20, 50, 11, 107, 182, 71, 89, 112, 246, 87, 22, 78, 91, 117, 104, 155, 100, 183, 253, 31, 162, 117, 243, 52, 242, 142, 24, 114, 182, 28, 96, 20, 52, 45, 145, 68, 112, 236, 122, 194, 151, 91, 227, 69, 121, 108, 43, 122, 226, 245, 185, 227, 134, 205, 27, 80, 164, 85, 6, 150, 217, 87, 203, 73, 0, 240, 58, 139, 108, 143, 217, 61, 111, 76, 234, 66, 187, 179, 69, 219, 198, 240, 223, 219, 91, 236, 115, 159, 140, 205, 175, 204, 57, 243, 199, 214, 235, 246, 55, 201, 21, 22, 115, 203, 195, 107, 136, 166, 247, 155, 96, 53, 159, 20, 29, 249, 10, 12, 116, 81, 37, 177, 49, 202, 175, 253, 18, 170, 207, 106, 129, 25, 247, 225, 22, 35, 181, 164, 61, 166, 56, 233, 31, 102, 154, 19, 15, 172, 14, 21, 160, 56, 238, 223, 198, 139, 163, 195, 92, 115, 254, 213, 190, 74, 7, 175, 181, 190, 128, 125, 221, 176, 116, 99, 156, 217, 250, 97, 180, 118, 118, 192, 100, 252, 80, 214, 44, 206, 47, 215, 84, 78, 11, 44, 201, 70, 146, 212, 167, 4, 222, 190, 247, 188, 182, 19, 40, 226, 211, 167, 57, 239, 252, 211, 169, 147, 135, 208, 21, 226, 96, 238, 250, 199, 46, 190, 161, 233, 174, 50, 97, 164, 117, 162, 123, 177, 2, 143, 20, 11, 194, 167, 200, 67, 49, 138, 253, 234, 10, 110, 60, 81, 27, 189, 16, 244, 81, 158, 206, 55, 220, 36, 136, 126, 17, 181, 93, 238, 34, 99, 121, 219, 131, 207, 252, 104, 20, 149, 115, 12, 17, 253, 222, 121, 186, 76, 12, 239, 2, 116, 227, 24, 16, 201, 223, 2, 249, 143, 175, 222, 15, 132, 31, 78, 102, 161, 205, 225, 206, 184, 239, 238, 202, 255, 50, 251, 159, 138, 97, 5, 58, 86, 182, 9, 161, 87, 207, 150, 92, 169, 210, 124, 241, 138, 38, 231, 125, 95, 161, 53, 36, 241, 62, 46, 53, 4, 34, 63, 237, 21, 254, 35, 7, 184, 249, 167, 176, 60, 144, 109, 135, 11, 164, 81, 91, 237, 98, 17, 37, 81, 231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
const CORRUPT_HEADER: [u8; 1089] = [0, 0, 0, 0, 0, 0, 0, 243, 247, 170, 68, 94, 168, 240, 122, 56, 249, 106, 176, 222, 159, 140, 206, 75, 214, 28, 179, 0, 127, 181, 255, 43, 170, 245, 85, 13, 65, 195, 143, 29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66, 253, 64, 212, 147, 71, 104, 91, 29, 237, 128, 19, 120, 93, 102, 35, 204, 24, 210, 20, 50, 11, 107, 182, 71, 89, 141, 253, 180, 148, 144, 234, 70, 80, 154, 228, 41, 94, 91, 251, 174, 37, 162, 39, 239, 158, 208, 78, 72, 85, 74, 251, 228, 249, 115, 210, 53, 59, 217, 130, 39, 173, 222, 247, 132, 187, 135, 1, 22, 144, 40, 120, 128, 112, 185, 219, 113, 177, 64, 189, 188, 118, 245, 188, 51, 145, 105, 225, 137, 68, 95, 243, 132, 6, 46, 245, 218, 123, 33, 255, 248, 65, 145, 147, 32, 117, 221, 214, 158, 29, 90, 183, 176, 84, 27, 147, 118, 77, 20, 71, 55, 204, 38, 107, 162, 139, 12, 166, 27, 16, 178, 91, 4, 65, 236, 4, 142, 105, 78, 32, 135, 60, 148, 92, 33, 72, 127, 131, 198, 128, 130, 200, 137, 88, 104, 145, 54, 40, 128, 112, 49, 95, 238, 88, 182, 100, 129, 88, 71, 237, 15, 97, 168, 36, 206, 78, 72, 50, 24, 251, 103, 10, 24, 37, 173, 57, 1, 246, 54, 203, 249, 139, 102, 181, 223, 162, 29, 94, 132, 6, 239, 168, 117, 87, 41, 90, 170, 198, 28, 100, 178, 37, 198, 119, 220, 5, 196, 200, 86, 218, 142, 124, 107, 30, 21, 164, 191, 119, 34, 151, 20, 68, 216, 86, 152, 143, 34, 244, 226, 187, 132, 42, 24, 87, 197, 82, 135, 47, 132, 51, 72, 16, 236, 4, 49, 157, 17, 132, 77, 179, 156, 176, 217, 216, 53, 222, 98, 166, 12, 157, 148, 129, 249, 152, 193, 101, 125, 194, 136, 141, 28, 51, 131, 140, 75, 200, 243, 92, 215, 152, 150, 33, 205, 129, 38, 156, 47, 139, 107, 20, 69, 155, 200, 129, 209, 84, 26, 52, 162, 152, 142, 113, 68, 96, 65, 27, 15, 47, 52, 155, 166, 15, 36, 148, 178, 177, 72, 138, 23, 226, 165, 214, 16, 18, 69, 154, 77, 217, 38, 52, 59, 127, 84, 34, 240, 34, 0, 242, 124, 108, 198, 5, 113, 100, 67, 48, 117, 40, 152, 241, 128, 10, 197, 74, 54, 202, 198, 204, 101, 90, 132, 57, 234, 13, 33, 84, 3, 45, 2, 0, 0, 0, 0, 0, 0, 0, 208, 239, 22, 1, 0, 0, 0, 0, 66, 4, 181, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 76, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 6, 150, 98, 0, 0, 0, 0, 216, 131, 1, 1, 10, 132, 103, 101, 116, 104, 136, 103, 111, 49, 46, 49, 51, 46, 52, 133, 108, 105, 110, 117, 120, 0, 0, 0, 195, 22, 123, 223, 1, 36, 101, 23, 108, 70, 26, 251, 49, 110, 188, 119, 60, 97, 250, 238, 133, 166, 81, 93, 170, 41, 94, 38, 73, 92, 239, 111, 105, 223, 166, 153, 17, 217, 216, 228, 243, 187, 173, 184, 155, 41, 169, 124, 110, 255, 184, 164, 17, 218, 188, 106, 222, 239, 170, 132, 245, 6, 124, 139, 190, 45, 76, 64, 123, 190, 73, 67, 142, 216, 89, 254, 150, 91, 20, 13, 207, 26, 171, 113, 169, 63, 52, 155, 186, 254, 193, 85, 24, 25, 184, 190, 30, 254, 162, 252, 70, 202, 116, 154, 161, 104, 91, 29, 237, 128, 19, 120, 93, 102, 35, 204, 24, 210, 20, 50, 11, 107, 182, 71, 89, 112, 246, 87, 22, 78, 91, 117, 104, 155, 100, 183, 253, 31, 162, 117, 243, 52, 242, 142, 24, 114, 182, 28, 96, 20, 52, 45, 145, 68, 112, 236, 122, 194, 151, 91, 227, 69, 121, 108, 43, 122, 226, 245, 185, 227, 134, 205, 27, 80, 164, 85, 6, 150, 217, 87, 203, 73, 0, 240, 58, 139, 108, 143, 217, 61, 111, 76, 234, 66, 187, 179, 69, 219, 198, 240, 223, 219, 91, 236, 115, 159, 140, 205, 175, 204, 57, 243, 199, 214, 235, 246, 55, 201, 21, 22, 115, 203, 195, 107, 136, 166, 247, 155, 96, 53, 159, 20, 29, 249, 10, 12, 116, 81, 37, 177, 49, 202, 175, 253, 18, 170, 207, 106, 129, 25, 247, 225, 22, 35, 181, 164, 61, 166, 56, 233, 31, 102, 154, 19, 15, 172, 14, 21, 160, 56, 238, 223, 198, 139, 163, 195, 92, 115, 254, 213, 190, 74, 7, 175, 181, 190, 128, 125, 221, 176, 116, 99, 156, 217, 250, 97, 180, 118, 118, 192, 100, 252, 80, 214, 44, 206, 47, 215, 84, 78, 11, 44, 201, 70, 146, 212, 167, 4, 222, 190, 247, 188, 182, 19, 40, 226, 211, 167, 57, 239, 252, 211, 169, 147, 135, 208, 21, 226, 96, 238, 250, 199, 46, 190, 161, 233, 174, 50, 97, 164, 117, 162, 123, 177, 2, 143, 20, 11, 194, 167, 200, 67, 49, 138, 253, 234, 10, 110, 60, 81, 27, 189, 16, 244, 81, 158, 206, 55, 220, 36, 136, 126, 17, 181, 93, 238, 34, 99, 121, 219, 131, 207, 252, 104, 20, 149, 115, 12, 17, 253, 222, 121, 186, 76, 12, 239, 2, 116, 227, 24, 16, 201, 223, 2, 249, 143, 175, 222, 15, 132, 31, 78, 102, 161, 205, 225, 206, 184, 239, 238, 202, 255, 50, 251, 159, 138, 97, 5, 58, 86, 182, 9, 161, 87, 207, 150, 92, 169, 210, 124, 241, 138, 38, 231, 125, 95, 161, 53, 36, 241, 62, 46, 53, 4, 34, 63, 237, 21, 254, 35, 7, 184, 249, 167, 176, 60, 144, 109, 135, 11, 164, 81, 91, 237, 98, 17, 37, 81, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

#[test]
fn init_bridge_instance_works_with_valid_header() {
	new_test_ext().execute_with(|| {
		// Dispatch a signed extrinsic.
		assert_ok!(BinanceFv::init_bridge_instance(Origin::signed(1), BLOCK_200.to_vec()));

		// checks validator writes
		if let Some(val_set) = Validators::<Test>::get() {
			assert_eq!(val_set.last_update, 18280200);
			assert_eq!(val_set.validators.len(), 21);
		} else {
			assert!(false);
		}

		let valid_header: Header = Decode::decode(&mut &*BLOCK_200.to_vec()).unwrap();

		if let Some(header) = Headers::<Test>::get(valid_header.hash()) {
			assert_eq!(header, valid_header);
		} else {
			assert!(false);
		}

	});
}

#[test]
fn init_bridge_instance_fails_with_corrupt_header() {
	new_test_ext().execute_with(|| {
		// Dispatch a signed extrinsic.
		match BinanceFv::init_bridge_instance(Origin::signed(1), CORRUPT_HEADER.to_vec()) {
			Ok(_) => assert!(false),
			Err(err) => assert!(true)
				// assert_eq!(err, crate::Error::<T>::InvalidEncoding.into())
		}
	});
}

#[test]
fn init_bridge_instance_fails_with_invalid_sig() {
	new_test_ext().execute_with(|| {
		// Dispatch a signed extrinsic.
		match BinanceFv::init_bridge_instance(Origin::signed(1), INVALID_SIG.to_vec()) {
			Ok(_) => assert!(false),
			Err(err) => assert!(true) // WIP. Want to detect error type also
				// assert_eq!(err, crate::Error::<T>::InvalidEncoding.into())
		}
	});
}

#[test]
fn submit_header_works_with_correct_header() {
	new_test_ext().execute_with(|| {
		// init pallet
		BinanceFv::init_bridge_instance(Origin::signed(1), BLOCK_200.to_vec());
		let validator_set_old = Validators::<Test>::get().unwrap();

		match BinanceFv::submit_header(Origin::signed(1), BLOCK_300.to_vec()) {
			Err(err) => assert!(false),
			_ => ()
		}

		//Submitted non-epoch block. ValidatorSet should stay the same
		match Validators::<Test>::try_get() {
			Ok(validator_set_new) => assert_eq!(validator_set_old, validator_set_new),
			Err(_) => assert!(false)
		}

		let header: Header = Decode::decode(&mut &*BLOCK_300.to_vec()).unwrap();

		match Headers::<Test>::try_get(&header.hash()) {
			Ok(stored_header) => assert_eq!(header, stored_header),
			Err(_) => assert!(false)
		}

		// Submit next block
		match BinanceFv::submit_header(Origin::signed(1), BLOCK_400.to_vec()) {
			Err(err) => assert!(false),
			_ => ()
		}

		//Submitted non-epoch block. ValidatorSet should stay the same
		match Validators::<Test>::try_get() {
			Ok(validator_set_new) => {
				assert_eq!(validator_set_new.last_update, 18280400);
				assert_eq!(validator_set_new.validators.len(), 21) // could have same validators
			}
			Err(_) => assert!(false)
		}

		let header: Header = Decode::decode(&mut &*BLOCK_400.to_vec()).unwrap();

		match Headers::<Test>::try_get(&header.hash()) {
			Ok(stored_header) => assert_eq!(header, stored_header),
			Err(_) => assert!(false)
		}

	});
}

#[test]
fn submit_header_prevents_out_of_range() {
	new_test_ext().execute_with(|| {
		// init pallet
		BinanceFv::init_bridge_instance(Origin::signed(1), BLOCK_200.to_vec());
		let validator_set_old = Validators::<Test>::get().unwrap();

		// this block can't be verified with the current ValidatorSet because its to far ahead
		// This checks validator_set_authorized
		match BinanceFv::submit_header(Origin::signed(1), BLOCK_401.to_vec()) {
			Ok(()) => assert!(false),
			Err(err) => () // check for correct error here
		}
	});
}

#[test]
fn submit_header_prevents_backwards_submission() {
	new_test_ext().execute_with(|| {
		// init pallet
		BinanceFv::init_bridge_instance(Origin::signed(1), BLOCK_400.to_vec());
		let validator_set_old = Validators::<Test>::get().unwrap();
		// This checks validator_set_authorized
		match BinanceFv::submit_header(Origin::signed(1), BLOCK_200.to_vec()) {
			Ok(()) => assert!(false),
			Err(err) => () // check for correct error here
		}
	});
}

#[test]
fn submit_header_prevents_fails_with_corrupt_header() {
	new_test_ext().execute_with(|| {
		// init pallet
		BinanceFv::init_bridge_instance(Origin::signed(1), BLOCK_400.to_vec());
		let validator_set_old = Validators::<Test>::get().unwrap();
		match BinanceFv::submit_header(Origin::signed(1), CORRUPT_HEADER.to_vec()) {
			Ok(()) => assert!(false),
			Err(err) => () // check for correct error here
		}
	});
}

#[test]
fn submit_header_prevents_fails_with_invalid_sig() {
	new_test_ext().execute_with(|| {
		// init pallet
		BinanceFv::init_bridge_instance(Origin::signed(1), BLOCK_400.to_vec());
		let validator_set_old = Validators::<Test>::get().unwrap();
		// This checks validator_set_authorized
		match BinanceFv::submit_header(Origin::signed(1), INVALID_SIG.to_vec()) {
			Ok(()) => assert!(false),
			Err(err) => () // check for correct error here
		}
	});
}
