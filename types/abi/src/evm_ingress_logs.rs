use crate::types::TargetId;
use codec::{Decode, Encode, Input};
use scale_info::TypeInfo;
use sp_core::{crypto::AccountId32, H160, H256, U256};
use sp_std::prelude::*;

// emit OrderCreated(id, destination, asset, targetAccount, amount, rewardAsset, insurance, maxReward, nonce);
// event RemoteOrderIndexedCreated(bytes32 indexed id, uint32 indexed nonce, address indexed sender, bytes input);
// where input = abi.encode(destination, asset, targetAccount, amount, rewardAsset, insurance, maxReward)
pub fn get_remote_order_abi_descriptor() -> Vec<u8> {
    b"RemoteOrderIndexed:Log(sfxId+:H256,nonce+:Value32,sender+:Account20,destination:Bytes4,asset:Bytes4,targetAccount:Account32,amount:Value256,rewardAsset:Account20,insurance:Value256,maxReward:Value256)".to_vec()
}
#[derive(Debug, Clone, Eq, PartialEq, Encode, TypeInfo)]
pub struct RemoteEVMOrderLog {
    pub sfx_id: H256,
    pub nonce: u32,
    pub sender: H160,
    pub destination: TargetId,
    pub asset: u32,
    pub target_account: AccountId32,
    pub amount: U256,
    pub reward_asset: H160,
    pub insurance: U256,
    pub max_reward: U256,
}

// Implement custom Scale decoding for RemoteEVMOrderLog
impl Decode for RemoteEVMOrderLog {
    fn decode<I: Input>(input: &mut I) -> Result<Self, codec::Error> {
        // Skip first byte
        input.read_byte()?;

        let sfx_id = H256::decode(input)?;
        let nonce = u32::decode(input)?;
        let sender = H160::decode(input)?;
        let destination = TargetId::decode(input)?;
        let asset = u32::decode(input)?;
        let target_account = AccountId32::decode(input)?;
        let amount = U256::decode(input)?;
        let reward_asset = H160::decode(input)?;
        let insurance = U256::decode(input)?;
        let max_reward = U256::decode(input)?;

        Ok(RemoteEVMOrderLog {
            sfx_id,
            nonce,
            sender,
            destination,
            asset,
            target_account,
            amount,
            reward_asset,
            insurance,
            max_reward,
        })
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::{recode::recode_bytes_with_descriptor, Codec};
    use hex_literal::hex;

    #[test]
    fn test_remote_order_log_recodes_from_raw_rlp_event_bytes() {
        // Computed Root:  0x76435ece9646ad97cbaf7e8190af314df7f577b31f02f9c8ff12d3ea5a68b966
        // ðŸ§®proof-calculated receipts root vs block receipts root:  0x76435ece9646ad97cbaf7e8190af314df7f577b31f02f9c8ff12d3ea5a68b966 0x76435ece9646ad97cbaf7e8190af314df7f577b31f02f9c8ff12d3ea5a68b966
        // {
        //   proof: [
        //     'f8b1a0d573cf15a54d7ad0d0498169820a6dafd9633adec0f688d9d859d1741cdac5b6a03c3d817222f0515e057962c0db4bfd20674e227a3b3c43811b2f8f1357e127cea03fe55d8df8a0c96030c87b2f2caf2bc6f102b5546e097fda3f6eb8c89370ea6ca00e3ccf072c8ad2c828f4d859e0776b24cf345009c5cf3107413186a0617e5f7980808080a0e58215be848c1293dd381210359d84485553000a82b67410406d183b42adbbdd8080808080808080',
        //     'f90211a086ff47818c4ed0f1d97d62c83605e662754d5c21d94e807c2142f7294eefda64a034960e2a1e3ec16b96816e81f842a51291989f5606c41aadba21b8069adaad64a057f37f57fecb0d336797db86604ea1d73a7933d5e6043c371729ca90989d5f8ca034754510b4bf1c613de0202a877a92be3e81ae1aacef713ac63d7fcdbeb84e05a099ec62a5e2b7bd634351e10bbdad33afbb3d9b52cb9b0a449fd38cec498624aba0f6b2fa50ec73e180a7c8b61cceacc8bfdf9214ef3df95abf4fa7b2e0ee38bb1aa0bc1b4735f691d698650aa757c1fac347e47b272dca9780293a091755f1eb49c4a0bb81253270782d099bd0cb4b5ab1fe9faad27c1657d6e55c7bce1129b0426011a03a2e7a799dc4f627368880fa7bfe6116ad913eaa04c1b200ecc5f4980ced9558a0649a03c1e451f6033a6b359f819c019ca9eb5fdb140bc5f01d9f369e2f1d69e8a04172cab94d1db98e819c0f5513d4944806a110862d9d8b67981cec1f5e1b3358a02e73b02f64e412bb54b38dc94bd232934438951d765abfa71df971606f9b6f74a0089c2c3e3b0c99a5f22d0c8c2e29c5e89835aa3d0848722eb1a52ef1cd0bae56a05b5a11c3bd83a7a0c764b11ccdf98de8ae91012637ab318f5ba980d303d199dba05fe9d9c59da9e5e95049f9baaa514da634b87daf0307d8de047399395b3ec606a002373b6677d1b3d1ebe4501df696607732e075a452e05f9b6aa8323fe7ee05d880',
        //     'f902d420b902d002f902cc018354abeabf901c1f901be9496502ef03decd4aabd368cc46f5c2c22a645948cf884a07f1c6663f3b95396ee5e22d3f5fff2058cf091e620a0b1907eda0138b382c8b6a0e2da230e52caecf528190bb0f28767e3e02a2df185bcd070c3f019537e4d5844a00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000f85a57d965aecd289c625cae6161d0ab5141bc66b90120000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e003030303000000000000000000000000000000000000000000000000000000000000e80300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000064'
        //   ],
        //   root: '76435ece9646ad97cbaf7e8190af314df7f577b31f02f9c8ff12d3ea5a68b966',
        //   index: Uint8Array(1) [ 40 ],
        //
        //   value: '02f902cc018354abeabf901c1f901be9496502ef03decd4aabd368cc46f5c2c22a645948cf884a07f1c6663f3b95396ee5e22d3f5fff2058cf091e620a0b1907eda0138b382c8b6a0e2da230e52caecf528190bb0f28767e3e02a2df185bcd070c3f019537e4d5844a00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000f85a57d965aecd289c625cae6161d0ab5141bc66b90120000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e003030303000000000000000000000000000000000000000000000000000000000000e80300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000064',
        //   event: 'f901be9496502ef03decd4aabd368cc46f5c2c22a645948cf884a07f1c6663f3b95396ee5e22d3f5fff2058cf091e620a0b1907eda0138b382c8b6a0e2da230e52caecf528190bb0f28767e3e02a2df185bcd070c3f019537e4d5844a00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000f85a57d965aecd289c625cae6161d0ab5141bc66b90120000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e003030303000000000000000000000000000000000000000000000000000000000000e80300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000064'
        let encoded_event: Vec<u8> = hex!("f901be9496502ef03decd4aabd368cc46f5c2c22a645948cf884a07f1c6663f3b95396ee5e22d3f5fff2058cf091e620a0b1907eda0138b382c8b6a0e2da230e52caecf528190bb0f28767e3e02a2df185bcd070c3f019537e4d5844a00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000f85a57d965aecd289c625cae6161d0ab5141bc66b90120000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e003030303000000000000000000000000000000000000000000000000000000000000e80300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000064").into();

        let remote_order_abi_descriptor = get_remote_order_abi_descriptor();

        let recoded_message = recode_bytes_with_descriptor(
            encoded_event.clone(),
            get_remote_order_abi_descriptor(),
            Codec::Rlp,
            Codec::Scale,
        )
        .unwrap();

        let decoded_remote_order_log =
            RemoteEVMOrderLog::decode(&mut &recoded_message[..]).unwrap();

        assert_eq!(
            decoded_remote_order_log,
            RemoteEVMOrderLog {
                sfx_id: hex!("e2da230e52caecf528190bb0f28767e3e02a2df185bcd070c3f019537e4d5844")
                    .into(),
                nonce: 0,
                sender: hex!("f85a57d965aecd289c625cae6161d0ab5141bc66").into(),
                destination: [3, 3, 3, 3],
                asset: 65536000,
                target_account: AccountId32::from([0u8; 32]),
                amount: 100.into(),
                max_reward: 100.into(),
                insurance: 10.into(),
                reward_asset: hex!("0000000000000000000000000000000000000000").into(),
            }
        )
    }
}
